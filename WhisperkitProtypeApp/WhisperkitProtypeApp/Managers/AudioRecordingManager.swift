//
//  AudioRecordingManager.swift
//  WhisperkitProtypeApp
//
//  Created by AlbertKh on 19.10.2025.
//

import Foundation
import AVFoundation
import WhisperKit

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ WhisperKit
/// Manager for audio recording and passing to WhisperKit
class AudioRecordingManager {
    private var streamTranscriber: AudioStreamTranscriber?
    weak var delegate: TranscriptionDelegate?
    
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å audio session
    /// Setup audio session
    func setupAudioSession() throws {
        let audioSession = AVAudioSession.sharedInstance()
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        // First deactivate if active
        if audioSession.isOtherAudioPlaying {
            try audioSession.setActive(false, options: .notifyOthersOnDeactivation)
            print("üé§ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥—Ä—É–≥–æ–π –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–Ω—Ç")
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        // Setup category
        try audioSession.setCategory(
            .record,
            mode: .measurement,
            options: [.allowBluetooth, .defaultToSpeaker]
        )
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        // Activate session
        try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
        print("üé§ Audio session –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    }
    
    /// –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
    /// Start recording
    func startRecording(
        whisperKit: WhisperKit,
        decodingOptions: DecodingOptions,
        delegate: TranscriptionDelegate
    ) async throws {
        print("üé§ AudioRecordingManager.startRecording –≤—ã–∑–≤–∞–Ω")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        // Check if recording is already running
        if streamTranscriber != nil {
            print("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é...")
            await stopRecordingAsync()
            print("‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ª–µ–≥–∞—Ç–∞
        // Store delegate
        self.delegate = delegate
        print("üé§ –î–µ–ª–µ–≥–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(delegate)")
        
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å audio session
        // Setup audio session
        print("üé§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º audio session...")
        try setupAudioSession()
        
        // –°–æ–∑–¥–∞—Ç—å AudioStreamTranscriber —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        // Create AudioStreamTranscriber with correct parameters
        print("üé§ –°–æ–∑–¥–∞–µ–º AudioStreamTranscriber...")
        self.streamTranscriber = AudioStreamTranscriber(
            audioEncoder: whisperKit.audioEncoder,
            featureExtractor: whisperKit.featureExtractor,
            segmentSeeker: whisperKit.segmentSeeker,
            textDecoder: whisperKit.textDecoder,
            tokenizer: whisperKit.tokenizer!,
            audioProcessor: whisperKit.audioProcessor,
            decodingOptions: decodingOptions,
            requiredSegmentsForConfirmation: 3,
            silenceThreshold: 0.3,
            compressionCheckWindow: 20,
            useVAD: true,
            stateChangeCallback: { [weak self] oldState, newState in
                self?.handleStateChange(oldState, newState)
            }
        )
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        // Start streaming transcription through correct method
        print("üé§ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        try await streamTranscriber?.startStreamTranscription()
        print("üé§ –ü–æ—Ç–æ–∫–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    /// Stop recording (synchronous version)
    func stopRecording() {
        print("üõë AudioRecordingManager.stopRecording –≤—ã–∑–≤–∞–Ω")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        // Stop transcription through correct method
        Task {
            await streamTranscriber?.stopStreamTranscription()
            print("üõë –ü–æ—Ç–æ–∫–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        }
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º audio session
        // Deactivate audio session
        do {
            let audioSession = AVAudioSession.sharedInstance()
            try audioSession.setActive(false, options: .notifyOthersOnDeactivation)
            print("üõë Audio session –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ audio session: \(error)")
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        // Clear references
        streamTranscriber = nil
        delegate = nil
        print("üõë –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    /// Stop recording (asynchronous version)
    func stopRecordingAsync() async {
        print("üõë AudioRecordingManager.stopRecordingAsync –≤—ã–∑–≤–∞–Ω")
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        // Stop transcription through correct method
        await streamTranscriber?.stopStreamTranscription()
        print("üõë –ü–æ—Ç–æ–∫–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º audio session
        // Deactivate audio session
        do {
            let audioSession = AVAudioSession.sharedInstance()
            try audioSession.setActive(false, options: .notifyOthersOnDeactivation)
            print("üõë Audio session –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ audio session: \(error)")
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        // Clear references
        streamTranscriber = nil
        delegate = nil
        print("üõë –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
    }
    
    
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Handle transcription state changes
    private func handleStateChange(_ oldState: AudioStreamTranscriber.State, _ newState: AudioStreamTranscriber.State) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        // Check if state actually changed
        let stateChanged = oldState.isRecording != newState.isRecording
        let textChanged = oldState.currentText != newState.currentText
        let confirmedChanged = oldState.confirmedSegments.count != newState.confirmedSegments.count
        let unconfirmedChanged = oldState.unconfirmedSegments.count != newState.unconfirmedSegments.count
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        // Log only on actual changes
        if stateChanged || textChanged || confirmedChanged || unconfirmedChanged {
            print("üé§ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: \(oldState.isRecording) -> \(newState.isRecording)")
            print("üé§ –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: '\(newState.currentText)'")
            print("üé§ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: \(newState.confirmedSegments.count)")
            print("üé§ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: \(newState.unconfirmedSegments.count)")
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç) —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        // Send intermediate results (current text) only when changed
        if !newState.currentText.isEmpty && textChanged {
            let filteredText = filterServiceTokens(newState.currentText)
            if !filteredText.isEmpty {
                print("üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '\(filteredText)'")
                DispatchQueue.main.async { [weak self] in
                    self?.delegate?.didReceiveIntermediateResult(filteredText)
                }
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        // Send confirmed segments as final results
        if !newState.confirmedSegments.isEmpty {
            let confirmedText = newState.confirmedSegments.map { $0.text }.joined(separator: " ")
            let filteredText = filterServiceTokens(confirmedText)
            if !filteredText.isEmpty {
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '\(filteredText)'")
                DispatchQueue.main.async { [weak self] in
                    self?.delegate?.didReceiveFinalResult(filteredText)
                }
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∫–∞–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        // Send unconfirmed segments as intermediate only when changed
        if !newState.unconfirmedSegments.isEmpty && unconfirmedChanged {
            let unconfirmedText = newState.unconfirmedSegments.map { $0.text }.joined(separator: " ")
            let filteredText = filterServiceTokens(unconfirmedText)
            if !filteredText.isEmpty {
                print("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '\(filteredText)'")
                DispatchQueue.main.async { [weak self] in
                    self?.delegate?.didReceiveIntermediateResult(filteredText)
                }
            }
        }
    }
    
    /// –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã WhisperKit
    /// Filter WhisperKit service tokens
    private func filterServiceTokens(_ text: String) -> String {
        var filteredText = text
        
        // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        // Remove service tokens
        filteredText = filteredText.replacingOccurrences(of: "<|startoftranscript|>", with: "")
        filteredText = filteredText.replacingOccurrences(of: "<|endoftext|>", with: "")
        filteredText = filteredText.replacingOccurrences(of: "Waiting for speech...", with: "")
        filteredText = filteredText.replacingOccurrences(of: "Waiting for speech", with: "")
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <|—á–∏—Å–ª–æ.—á–∏—Å–ª–æ|>
        // Remove timestamps in format <|number.number|>
        filteredText = filteredText.replacingOccurrences(of: "<|\\d+\\.\\d+\\|>", with: "", options: .regularExpression)
        
        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        // Remove empty brackets and extra spaces
        filteredText = filteredText.replacingOccurrences(of: "\\[\\s*\\]", with: "", options: .regularExpression)
        
        // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã | –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        // Remove single | characters and extra spaces
        filteredText = filteredText.replacingOccurrences(of: "\\|\\s*", with: "", options: .regularExpression)
        filteredText = filteredText.replacingOccurrences(of: "\\s+", with: " ", options: .regularExpression)
        
        // –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã [end] –∏ –ø–æ–¥–æ–±–Ω—ã–µ
        // Remove service tokens like [end]
        filteredText = filteredText.replacingOccurrences(of: "\\[end\\]", with: "", options: .regularExpression)
        filteredText = filteredText.replacingOccurrences(of: "\\[\\s*end\\s*\\]", with: "", options: .regularExpression)
        
        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        // Remove leading and trailing whitespace
        filteredText = filteredText.trimmingCharacters(in: .whitespacesAndNewlines)
        
        return filteredText
    }
}
