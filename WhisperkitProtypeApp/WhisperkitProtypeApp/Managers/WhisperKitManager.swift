//
//  WhisperKitManager.swift
//  WhisperkitProtypeApp
//
//  Created by AlbertKh on 19.10.2025.
//

import Foundation
import WhisperKit

/// Singleton –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WhisperKit
/// Singleton manager for WhisperKit management
class WhisperKitManager {
    // MARK: - Singleton
    static let shared = WhisperKitManager()
    
    // MARK: - Properties
    private var whisperKit: WhisperKit?
    private let modelDownloadManager: ModelDownloadManager
    private let retryManager: RetryManager
    private var audioRecordingManager: AudioRecordingManager?
    private let errorHandler: ErrorHandler
    
    private var isInitialized = false
    
    // MARK: - Initialization
    private init() {
        self.modelDownloadManager = ModelDownloadManager()
        self.retryManager = RetryManager(maxRetries: 3, baseDelay: 1.0)
        self.errorHandler = ErrorHandler()
    }
    
    // MARK: - Public Methods
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhisperKit —Å –º–æ–¥–µ–ª—å—é tiny-en
    /// Initialize WhisperKit with tiny-en model
    func initialize() async throws {
        guard !isInitialized else {
            print("‚úÖ WhisperKit already initialized")
            return
        }
        
        try await retryManager.retry { [self] in
            // 1. –°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            // 1. Download model if needed
            print("üì• Downloading model if needed...")
            try await modelDownloadManager.downloadModelIfNeeded()
            
            // 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            // 2. Setup configuration
            let config = createConfig()
            
            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WhisperKit
            // 3. Initialize WhisperKit
            print("üöÄ Initializing WhisperKit...")
            self.whisperKit = try await WhisperKit(config)
            
            self.isInitialized = true
            print("‚úÖ WhisperKit initialized successfully")
        }
    }
    
    /// –ù–∞—á–∞—Ç—å real-time —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    /// Start real-time transcription
    func startRealtimeTranscription(delegate: TranscriptionDelegate) async throws {
        guard isInitialized, let whisperKit = whisperKit else {
            throw WhisperKitError.notInitialized
        }
        
        // –°–æ–∑–¥–∞—Ç—å audio recording manager –µ—Å–ª–∏ –Ω–µ—Ç
        // Create audio recording manager if not exists
        if audioRecordingManager == nil {
            audioRecordingManager = AudioRecordingManager()
        }
        
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å decoding options
        // Setup decoding options
        let decodingOptions = createDecodingOptions(delegate: delegate)
        
        // –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
        // Start recording
        try await audioRecordingManager?.startRecording(
            whisperKit: whisperKit,
            decodingOptions: decodingOptions,
            delegate: delegate
        )
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    /// Stop transcription
    func stopTranscription() async {
        audioRecordingManager?.stopRecording()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    /// Check if ready
    func isReady() -> Bool {
        return isInitialized && whisperKit != nil
    }
    
    /// –í—ã–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
    /// Unload model (for memory saving)
    func unloadModels() async {
        await whisperKit?.unloadModels()
        isInitialized = false
        print("‚ôªÔ∏è Models unloaded")
    }
    
    // MARK: - Private Methods
    
    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WhisperKit
    /// Create WhisperKit configuration
    private func createConfig() -> WhisperKitConfig {
        let config = WhisperKitConfig(
            model: "openai_whisper-small.en", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
            modelFolder: nil, // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º modelFolder, —á—Ç–æ–±—ã WhisperKit —Å–∞–º –∑–∞–≥—Ä—É–∑–∏–ª
            verbose: false,
            prewarm: true,
            load: true,
            download: true
        )
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º downloadBase –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
        // Set downloadBase for model downloading
        config.downloadBase = modelDownloadManager.getCachePath().deletingLastPathComponent().deletingLastPathComponent()
        
        // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å compute options –¥–ª—è Neural Engine
        // Setup compute options for Neural Engine
        var computeOptions = ModelComputeOptions()
        computeOptions.audioEncoderCompute = .cpuAndNeuralEngine
        computeOptions.textDecoderCompute = .cpuAndNeuralEngine
        config.computeOptions = computeOptions
        
        return config
    }
    
    /// –°–æ–∑–¥–∞—Ç—å decoding options
    /// Create decoding options
    private func createDecodingOptions(delegate: TranscriptionDelegate) -> DecodingOptions {
        var options = DecodingOptions()
        
        // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        // Basic settings
        options.language = "en"
        options.task = .transcribe
        options.temperature = 0.0
        options.wordTimestamps = true
        options.detectLanguage = true
        
        // –ö–æ–ª–±—ç–∫–∏ –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ AudioRecordingManager
        // Callbacks will be configured in AudioRecordingManager
        
        return options
    }
}
