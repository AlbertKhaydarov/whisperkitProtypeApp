//
//  RecognitionPresenter.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 21.10.2025.
//

import Foundation

// MARK: - RecognitionPresenter Delegate
protocol RecognitionPresenterDelegate: AnyObject {
    func recognitionPresenter(_ presenter: RecognitionPresenter, didUpdateStatus status: AppStatus)
    func recognitionPresenter(_ presenter: RecognitionPresenter, didUpdateProgress progress: Double)
    func recognitionPresenter(_ presenter: RecognitionPresenter, didUpdateTranscription text: String)
    func recognitionPresenter(_ presenter: RecognitionPresenter, didEncounterError error: Error)
}

// MARK: - App Status
enum AppStatus {
    case loading
    case downloadingModel(progress: Double)
    case warmingModel(progress: Double)
    case ready
    case recording
    case processing
    case error(Error)
}

/// –ü—Ä–µ–∑–µ–Ω—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π —Ä–µ—á–∏
/// Presenter for managing speech transcription
class RecognitionPresenter {
    
    // MARK: - Properties
    private let whisperManager: WhisperKitManager
    private let audioManager: AudioRecordingManager
    private let downloadManager: ModelDownloadManager
    private var currentTranscription = ""
    private var isTranscribing = false
    
    // MARK: - Model Selection
    private var selectedModel: String = "tiny.en" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é tiny.en (—Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è)
    
    // MARK: - Delegate
    weak var delegate: RecognitionPresenterDelegate?
    
    // MARK: - Initialization
    init(
        whisperManager: WhisperKitManager = WhisperKitManager.shared,
        audioManager: AudioRecordingManager = AudioRecordingManager(),
        downloadManager: ModelDownloadManager = ModelDownloadManager()
    ) {
        self.whisperManager = whisperManager
        self.audioManager = audioManager
        self.downloadManager = downloadManager
        
        setupDelegates()
    }
    
    // MARK: - Public Methods
    
    /// –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Select model for transcription
    func selectModel(_ modelName: String) {
        guard ["tiny.en", "base.en", "small.en"].contains(modelName) else {
            print("‚ùå Unsupported model: \(modelName)")
            return
        }
        selectedModel = modelName
        print("üì± Model selected: \(modelName)")
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    /// Get available models
    func getAvailableModels() -> [String] {
        return downloadManager.getAvailableModels()
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    /// Get currently selected model
    func getSelectedModel() -> String {
        return selectedModel
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Initialize transcription system
    func initializeTranscription() async {
        do {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await updateStatus(.loading)
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperKit
            try await whisperManager.initialize()
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            let modelURL = try await downloadManager.downloadModel(selectedModel)
            try await whisperManager.loadModel(from: modelURL)
            
            // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å
            try await whisperManager.warmup()
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            try await whisperManager.startNewSession()
            
            // –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
            print("üéØ Setting status to READY for model: \(selectedModel)")
            await updateStatus(.ready)
            print("‚úÖ Transcription system ready for model: \(selectedModel)")
            
        } catch {
            await updateStatus(.error(error))
            await handleError(error)
        }
    }
    
    /// –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Start transcription
    func startTranscription() async {
        guard !isTranscribing else {
            print("‚ö†Ô∏è Already transcribing")
            return
        }
        
        do {
            isTranscribing = true
            currentTranscription = ""
            
            await updateStatus(.recording)
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
            try await audioManager.startRecording()
            
            print("üé§ Transcription started")
            
        } catch {
            await handleError(error)
        }
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Stop transcription
    func stopTranscription() async {
        guard isTranscribing else {
            print("‚ö†Ô∏è Not transcribing")
            return
        }
        
        do {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            try await audioManager.stopRecording()
            
            // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            await updateStatus(.processing)
            let finalSegments = try await whisperManager.finalize()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            let finalText = finalSegments.map(\.text).joined(separator: " ")
            currentTranscription = finalText
            
            await updateTranscription(finalText)
            await updateStatus(.ready)
            
            isTranscribing = false
            
            print("‚èπÔ∏è Transcription stopped")
            
        } catch {
            await handleError(error)
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Get current transcription
    func getCurrentTranscription() -> String {
        return currentTranscription
    }
    
    /// –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Clear transcription
    func clearTranscription() async {
        currentTranscription = ""
        await updateTranscription("")
    }
    
    // MARK: - Private Methods
    
    private func setupDelegates() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        Task {
            await whisperManager.setDelegate(self)
        }
        audioManager.delegate = self
        downloadManager.delegate = self
    }
    
    private func updateStatus(_ status: AppStatus) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didUpdateStatus: status)
        }
    }
    
    private func updateProgress(_ progress: Double) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didUpdateProgress: progress)
        }
    }
    
    private func updateTranscription(_ text: String) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didUpdateTranscription: text)
        }
    }
    
    private func handleError(_ error: Error) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didEncounterError: error)
        }
    }
}

// MARK: - WhisperKitManager Delegate
extension RecognitionPresenter: WhisperKitManagerDelegate {
    func whisperKitManager(_ manager: WhisperKitManager, didUpdateWarmupProgress progress: Double) {
        Task {
            await updateProgress(progress)
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–Ω—å—à–µ 0.9 (90%)
            // –ü–æ—Å–ª–µ 90% —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .ready –≤ initializeTranscription()
            if progress < 0.9 {
                await updateStatus(.warmingModel(progress: progress))
            }
        }
    }
    
    func whisperKitManager(_ manager: WhisperKitManager, didReceiveSegments segments: [WhisperSegment]) {
        Task {
            let newText = segments.map { $0.text }.joined(separator: " ")
            currentTranscription += newText
            await updateTranscription(currentTranscription)
        }
    }
    
    func whisperKitManager(_ manager: WhisperKitManager, didCompleteWithSegments segments: [WhisperSegment]) {
        Task {
            let finalText = segments.map { $0.text }.joined(separator: " ")
            currentTranscription = finalText
            await updateTranscription(currentTranscription)
        }
    }
    
    func whisperKitManager(_ manager: WhisperKitManager, didFailWith error: Error) {
        Task {
            await handleError(error)
        }
    }
}

// MARK: - AudioRecordingManager Delegate
extension RecognitionPresenter: AudioRecordingManagerDelegate {
    func audioRecordingManager(_ manager: AudioRecordingManager, didStartRecording: Bool) {
        print("üé§ Audio recording started")
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didStopRecording: Bool) {
        print("‚èπÔ∏è Audio recording stopped")
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didProduceAudioFrames frames: [Float]) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º—ã –≤ WhisperKit –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        Task {
            do {
                _ = try await whisperManager.transcribe(audioFrames: frames)
            } catch {
                await handleError(error)
            }
        }
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didFailWith error: Error) {
        Task {
            await handleError(error)
        }
    }
}

// MARK: - ModelDownloadManager Delegate
extension RecognitionPresenter: ModelDownloadManagerDelegate {
    func modelDownloadManager(_ manager: ModelDownloadManager, didUpdateProgress progress: Double) {
        Task {
            await updateProgress(progress)
            await updateStatus(.downloadingModel(progress: progress))
        }
    }
    
    func modelDownloadManager(_ manager: ModelDownloadManager, didCompleteDownloadFor modelName: String, at localURL: URL) {
        Task {
            print("‚úÖ Download completed for \(modelName)")
            // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ initializeTranscription()
            // Status update is handled in initializeTranscription()
        }
    }
    
    func modelDownloadManager(_ manager: ModelDownloadManager, didFailDownloadFor modelName: String, with error: Error) {
        Task {
            await handleError(error)
        }
    }
}
