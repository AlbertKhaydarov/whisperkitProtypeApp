//
//  RecognitionPresenter.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 21.10.2025.
//

import Foundation

// MARK: - RecognitionPresenter Delegate
protocol RecognitionPresenterDelegate: AnyObject {
    func recognitionPresenter(_ presenter: RecognitionPresenter, didUpdateStatus status: AppStatus)
    func recognitionPresenter(_ presenter: RecognitionPresenter, didUpdateProgress progress: Double)
    func recognitionPresenter(_ presenter: RecognitionPresenter, didUpdateTranscription text: String)
    func recognitionPresenter(_ presenter: RecognitionPresenter, didEncounterError error: Error)
}

// MARK: - App Status
enum AppStatus {
    case loading
    case downloadingModel(progress: Double)
    case warmingModel(progress: Double)
    case ready
    case recording
    case processing
    case error(Error)
}

/// –ü—Ä–µ–∑–µ–Ω—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π —Ä–µ—á–∏
/// Presenter for managing speech transcription
class RecognitionPresenter {
    
    // MARK: - Properties
    private let whisperManager: WhisperKitManager
    private let audioManager: AudioRecordingManager
    private let downloadManager: ModelDownloadManager
    private let qualityManager: WhisperKitQualityManager
    private var currentTranscription = ""
    private var isTranscribing = false
    
    // MARK: - Model Selection
    private var selectedModel: String = "tiny.en" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é tiny.en (WhisperKit —Ñ–æ—Ä–º–∞—Ç)
    
    // MARK: - Quality Management
    private var isQualityManagerEnabled = false
    private var currentQualityLevel: QualityLevel = .adaptive
    
    // MARK: - Delegate
    weak var delegate: RecognitionPresenterDelegate?
    
    // MARK: - Initialization
    init(
        whisperManager: WhisperKitManager = WhisperKitManager.shared,
        audioManager: AudioRecordingManager = AudioRecordingManager(),
        downloadManager: ModelDownloadManager = ModelDownloadManager(),
        qualityManager: WhisperKitQualityManager = WhisperKitQualityManager.shared
    ) {
        self.whisperManager = whisperManager
        self.audioManager = audioManager
        self.downloadManager = downloadManager
        self.qualityManager = qualityManager
        
        setupDelegates()
        
        // Quality Manager –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ UI –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        print("‚ÑπÔ∏è [QUALITY] Quality Manager ready for manual activation via UI")
    }
    
    // MARK: - Public Methods
    
    /// –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Select model for transcription
    func selectModel(_ modelName: String) {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ WhisperKit —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .en
        guard ["tiny.en", "base.en", "small.en", "medium.en", "large-v3"].contains(modelName) else {
            print("‚ùå Unsupported model: \(modelName)")
            return
        }
        selectedModel = modelName
        print("üì± Model selected: \(modelName)")
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WhisperKit
        Task {
            await updateWhisperConfiguration(modelName: modelName, language: "en")
        }
    }
    
    /// –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    /// Enable high quality mode
    func enableHighQualityMode() async throws {
        await whisperManager.enableHighQualityMode()
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        await initializeTranscription()
    }
    
    /// –í–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    /// Enable standard mode
    func enableStandardMode() async throws {
        await whisperManager.enableStandardMode()
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        await initializeTranscription()
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    /// Get available models
    func getAvailableModels() -> [String] {
        return downloadManager.getAvailableModels()
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    /// Get currently selected model
    func getSelectedModel() -> String {
        return selectedModel
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Initialize transcription system
    func initializeTranscription() async {
        do {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhisperKit –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
            await whisperManager.reset()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await updateStatus(.loading)
            print("üöÄ Starting transcription system initialization...")
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WhisperKit
            await updateWhisperConfiguration(modelName: selectedModel, language: "en")
            print("üåç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: en")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperKit (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å)
            print("üì± Initializing WhisperKit with model: \(selectedModel)")
            try await whisperManager.initialize()
            print("‚úÖ WhisperKit initialized")
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å (WhisperKit –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            print("üì• Loading model: \(selectedModel)")
            await updateStatus(.downloadingModel(progress: 0.2))
            try await whisperManager.loadModel()
            print("‚úÖ Model loaded")
            
            // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å
            print("üî• Warming up model...")
            await updateStatus(.warmingModel(progress: 0.0))
            try await whisperManager.warmup()
            print("‚úÖ Model warmed up")
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            print("üÜï Creating new transcription session...")
            try await whisperManager.startNewSession()
            print("‚úÖ Transcription session created")
            
            // –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
            print("üéØ Setting status to READY for model: \(selectedModel)")
            await updateStatus(.ready)
            print("‚úÖ Transcription system ready for model: \(selectedModel)")
            
        } catch {
            print("‚ùå Failed to initialize transcription system: \(error)")
            print("‚ùå Error details: \(error.localizedDescription)")
            await updateStatus(.error(error))
            await handleError(error)
        }
    }
    
    /// –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Start transcription
    func startTranscription() async {
        guard !isTranscribing else {
            print("‚ö†Ô∏è Already transcribing")
            return
        }
        
        do {
            isTranscribing = true
            currentTranscription = ""
            
            // –û—á–∏—â–∞–µ–º UI —Å—Ä–∞–∑—É
            await updateTranscription("")
            await updateStatus(.recording)
            
            // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä WhisperKit –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            await whisperManager.clearAudioBuffer()
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ
            try await audioManager.startRecording()
            
            print("üé§ Transcription started - –æ—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
        } catch {
            await handleError(error)
        }
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Stop transcription
    func stopTranscription() async {
        guard isTranscribing else {
            print("‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return
        }
        
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        
        do {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            try await audioManager.stopRecording()
            
            // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
            await whisperManager.clearAudioBuffer()
            
            // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä Quality Manager –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if isQualityManagerEnabled {
                await qualityManager.clearAudioBuffer()
            }
            
            // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            await updateStatus(.processing)
            print("üîÑ –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
            
            let finalSegments = try await whisperManager.finalize()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            if !finalSegments.isEmpty {
                let finalText = finalSegments.map(\.text).joined(separator: " ")
                print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: \"\(finalText)\"")
                currentTranscription = finalText
                await updateTranscription(finalText)
            } else {
                print("‚ÑπÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π")
                // –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if !currentTranscription.isEmpty {
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"\(currentTranscription)\"")
                    await updateTranscription(currentTranscription)
                } else {
                    print("‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    await updateTranscription("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                }
            }
            
            await updateStatus(.ready)
            isTranscribing = false
            print("‚èπÔ∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(error.localizedDescription)")
            await handleError(error)
            isTranscribing = false
            await updateStatus(.ready)
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Get current transcription
    func getCurrentTranscription() -> String {
        return currentTranscription
    }
    
    /// –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Clear transcription
    func clearTranscription() async {
        currentTranscription = ""
        await updateTranscription("")
    }
    
    // MARK: - Quality Management Methods
    
    /// –í–∫–ª—é—á–µ–Ω–∏–µ Quality Manager
    /// Enable Quality Manager
    func enableQualityManager() async throws {
        guard !isQualityManagerEnabled else {
            print("‚ö†Ô∏è Quality Manager already enabled")
            return
        }
        
        print("üéØ [QUALITY] Enabling Quality Manager...")
        
        do {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Quality Manager —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
            try await qualityManager.initialize(qualityLevel: .adaptive)
            
            isQualityManagerEnabled = true
            currentQualityLevel = .adaptive
            
            print("‚úÖ [QUALITY] Quality Manager enabled with adaptive selection")
            
        } catch {
            print("‚ùå [QUALITY] Failed to enable Quality Manager: \(error.localizedDescription)")
            throw error
        }
    }
    
    /// –í—ã–∫–ª—é—á–µ–Ω–∏–µ Quality Manager
    /// Disable Quality Manager
    func disableQualityManager() async {
        guard isQualityManagerEnabled else {
            print("‚ö†Ô∏è Quality Manager already disabled")
            return
        }
        
        print("üîÑ [QUALITY] Disabling Quality Manager...")
        
        await qualityManager.reset()
        isQualityManagerEnabled = false
        
        print("‚úÖ [QUALITY] Quality Manager disabled")
    }
    
    /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
    /// Switch quality level
    func switchQualityLevel(to level: QualityLevel) async throws {
        guard isQualityManagerEnabled else {
            print("‚ö†Ô∏è Quality Manager not enabled")
            return
        }
        
        print("üîÑ [QUALITY] Switching to quality level: \(level.rawValue)")
        
        do {
            try await qualityManager.switchQualityLevel(to: level)
            currentQualityLevel = level
            
            print("‚úÖ [QUALITY] Quality level switched to: \(level.rawValue)")
            
        } catch {
            print("‚ùå [QUALITY] Failed to switch quality level: \(error.localizedDescription)")
            throw error
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
    /// Get current quality level
    func getCurrentQualityLevel() -> QualityLevel {
        return currentQualityLevel
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
    /// Get available quality levels
    func getAvailableQualityLevels() -> [QualityLevel] {
        return QualityLevel.allCases
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
    /// Get quality metrics
    func getQualityMetrics() async -> QualityMetrics? {
        return await qualityManager.getCurrentMetrics()
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
    /// Get metrics history
    func getQualityMetricsHistory() async -> [QualityMetrics] {
        return await qualityManager.getMetricsHistory()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ Quality Manager
    /// Check if Quality Manager is enabled
    func isQualityManagerActive() -> Bool {
        return isQualityManagerEnabled
    }
    
    // MARK: - Private Methods
    
    private func setupDelegates() {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        Task {
            await whisperManager.setDelegate(self)
        }
        audioManager.delegate = self
        downloadManager.delegate = self
    }
    
    private func updateStatus(_ status: AppStatus) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didUpdateStatus: status)
        }
    }
    
    private func updateProgress(_ progress: Double) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didUpdateProgress: progress)
        }
    }
    
    private func updateTranscription(_ text: String) async {
        await MainActor.run {
            delegate?.recognitionPresenter(self, didUpdateTranscription: text)
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WhisperKit
    private func updateWhisperConfiguration(modelName: String, language: String) async {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞
        let config = WhisperConfiguration(
            language: language,
            translate: false,
            modelName: modelName,
            sampleRate: 16000
        )
        await whisperManager.updateConfiguration(config)
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhisperKit: –º–æ–¥–µ–ª—å = \(modelName), —è–∑—ã–∫ = \(language)")
    }
    
    private func handleError(_ error: Error) async {
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: \(error.localizedDescription)")
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if let whisperError = error as? WhisperKitError {
            switch whisperError {
            case .transcriptionFailed:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if !currentTranscription.isEmpty {
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É: \"\(currentTranscription)\"")
                }
            case .modelNotLoaded:
                print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            case .notReady:
                print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞")
            default:
                print("‚ö†Ô∏è –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ WhisperKit: \(whisperError)")
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç
        await updateStatus(.error(error))
        
        await MainActor.run {
            delegate?.recognitionPresenter(self, didEncounterError: error)
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        isTranscribing = false
    }
}

// MARK: - WhisperKitManager Delegate
extension RecognitionPresenter: WhisperKitManagerDelegate {
    func whisperKitManager(_ manager: WhisperKitManager, didUpdateWarmupProgress progress: Double) {
        Task {
            await updateProgress(progress)
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ª—é–±–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            await updateStatus(.warmingModel(progress: progress))
            
            // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω (100%), –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ ready
            if progress >= 1.0 {
                await updateStatus(.ready)
            }
        }
    }
    
    func whisperKitManager(_ manager: WhisperKitManager, didReceiveSegments segments: [WhisperSegment]) {
        Task {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –º–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            if !segments.isEmpty {
                let newText = segments.map { $0.text }.joined(separator: " ")
                print("üîä –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: \"\(newText)\"")
                
                // WhisperKit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–∞–∂–¥–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                // –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                currentTranscription = newText
                
                print("üîä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: \"\(currentTranscription)\"")
                await updateTranscription(currentTranscription)
            } else {
                print("‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            }
        }
    }
    
    func whisperKitManager(_ manager: WhisperKitManager, didCompleteWithSegments segments: [WhisperSegment]) {
        Task {
            if !segments.isEmpty {
                let finalText = segments.map { $0.text }.joined(separator: " ")
                print("üîä –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: \"\(finalText)\"")
                
                // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–º–µ–Ω—è—é—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                currentTranscription = finalText
                
                print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: \"\(currentTranscription)\"")
                await updateTranscription(currentTranscription)
            } else {
                print("‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                // –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –Ω–æ –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if !currentTranscription.isEmpty {
                    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"\(currentTranscription)\"")
                    await updateTranscription(currentTranscription)
                } else {
                    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    currentTranscription = ""
                    print("‚ö†Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    await updateTranscription("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                }
            }
        }
    }
    
    func whisperKitManager(_ manager: WhisperKitManager, didFailWith error: Error) {
        Task {
            await handleError(error)
        }
    }
}

// MARK: - AudioRecordingManager Delegate
extension RecognitionPresenter: AudioRecordingManagerDelegate {
    func audioRecordingManager(_ manager: AudioRecordingManager, didStartRecording: Bool) {
        print("üé§ Audio recording started")
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didStopRecording: Bool) {
        print("‚èπÔ∏è Audio recording stopped")
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didProduceAudioFrames frames: [Float]) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º—ã –≤ WhisperKit –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        Task {
            do {
                let isQualityReady = await qualityManager.isReady
                print("üé§ [STREAM] Processing audio frames: \(frames.count), Quality enabled: \(isQualityManagerEnabled), Quality ready: \(isQualityReady)")
                
                if isQualityManagerEnabled && isQualityReady {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Quality Manager –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    print("üéØ [STREAM] Using Quality Manager for transcription")
                    let result = try await qualityManager.transcribe(audioArray: frames)
                    print("üéØ [STREAM] Quality Manager result: '\(result)'")
                    if !result.isEmpty {
                        currentTranscription = result
                        await updateTranscription(result)
                    }
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π WhisperKit Manager
                    print("üì± [STREAM] Using standard WhisperKit Manager for transcription")
                    let segments = try await whisperManager.transcribe(audioFrames: frames)
                    print("üì± [STREAM] WhisperKit Manager segments: \(segments.count)")
                    if !segments.isEmpty {
                        let result = segments.map { $0.text }.joined(separator: " ")
                        print("üì± [STREAM] WhisperKit Manager result: '\(result)'")
                        currentTranscription = result
                        await updateTranscription(result)
                    } else {
                        print("‚ö†Ô∏è [STREAM] No segments returned from WhisperKit Manager")
                    }
                }
            } catch {
                print("‚ùå [STREAM] Transcription error: \(error.localizedDescription)")
                await handleError(error)
            }
        }
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didFailWith error: Error) {
        Task {
            await handleError(error)
        }
    }
    
    func audioRecordingManager(_ manager: AudioRecordingManager, didTranscribeFile filePath: String) {
        Task {
            print("üéµ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(filePath)")
            
            do {
                let result: String
                if isQualityManagerEnabled {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Quality Manager –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ñ–∞–π–ª–∞
                    print("üìä [QUALITY] Using Quality Manager for file transcription")
                    result = try await qualityManager.transcribeFile(audioPath: filePath)
                } else {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π WhisperKit Manager
                    print("üì± [STREAM] Using standard WhisperKit Manager for file transcription")
                    let segments = try await whisperManager.transcribeFile(audioPath: filePath)
                    result = segments.map { $0.text }.joined(separator: " ")
                }
                
                if !result.isEmpty {
                    print("üéâ –§–ê–ô–õ–û–í–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø: '\(result)'")
                    // –§–∞–π–ª–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                } else {
                    print("‚ö†Ô∏è –§–∞–π–ª–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                }
                
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: \(error.localizedDescription)")
            }
        }
    }
}

// MARK: - ModelDownloadManager Delegate
extension RecognitionPresenter: ModelDownloadManagerDelegate {
    func modelDownloadManager(_ manager: ModelDownloadManager, didUpdateProgress progress: Double) {
        Task {
            await updateProgress(progress)
            await updateStatus(.downloadingModel(progress: progress))
        }
    }
    
    func modelDownloadManager(_ manager: ModelDownloadManager, didCompleteDownloadFor modelName: String) {
        Task {
            print("‚úÖ Download completed for \(modelName)")
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ ready –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            // –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤ initializeTranscription() –º—ã —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await updateStatus(.ready)
        }
    }
    
    func modelDownloadManager(_ manager: ModelDownloadManager, didFailDownloadFor modelName: String, with error: Error) {
        Task {
            await handleError(error)
        }
    }
}
