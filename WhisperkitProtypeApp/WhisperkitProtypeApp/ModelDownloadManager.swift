//
//  ModelDownloadManager.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 21.10.2025.
//

import Foundation

// MARK: - ModelDownloadManager Delegate
protocol ModelDownloadManagerDelegate: AnyObject {
    func modelDownloadManager(_ manager: ModelDownloadManager, didUpdateProgress progress: Double)
    func modelDownloadManager(_ manager: ModelDownloadManager, didCompleteDownloadFor modelName: String, at localURL: URL)
    func modelDownloadManager(_ manager: ModelDownloadManager, didFailDownloadFor modelName: String, with error: Error)
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏ Whisper
/// Manager for downloading and managing Whisper models
class ModelDownloadManager: NSObject {
    
    // MARK: - Properties
    private let urlSession: URLSession
    private let fileManager: FileManager
    private var activeDownloads: [String: URLSessionDownloadTask] = [:]
    
    // MARK: - Delegate
    weak var delegate: ModelDownloadManagerDelegate?
    
    // MARK: - Initialization
    override init() {
        let config = URLSessionConfiguration.default
        self.fileManager = FileManager.default
        self.urlSession = URLSession(configuration: config, delegate: nil, delegateQueue: nil)
        super.init()
        // Note: URLSession delegate cannot be set after initialization
        // We'll need to handle download completion differently
    }
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    /// Download model
    func downloadModel(_ modelName: String) async throws -> URL {
        guard let modelConfig = getModelConfiguration(modelName) else {
            throw ModelDownloadError.modelNotFound
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è
        if let localURL = getLocalModelURL(modelName) {
            print("üìÅ Model already exists locally: \(localURL.path)")
            return localURL
        }
        
        print("üì• Starting download for model: \(modelName)")
        
        guard let url = URL(string: modelConfig.downloadURL) else {
            throw ModelDownloadError.invalidURL
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º async/await –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        let (localURL, _) = try await urlSession.download(from: url)
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –Ω—É–∂–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        let documentsDir = getDocumentsDirectory()
        let modelsDir = documentsDir.appendingPathComponent("Models")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Models –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if !fileManager.fileExists(atPath: modelsDir.path) {
            try fileManager.createDirectory(at: modelsDir, withIntermediateDirectories: true)
        }
        
        let destinationURL = modelsDir.appendingPathComponent("\(modelName).zip")
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if fileManager.fileExists(atPath: destinationURL.path) {
            try fileManager.removeItem(at: destinationURL)
        }
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try fileManager.moveItem(at: localURL, to: destinationURL)
        
        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP —Ñ–∞–π–ª
        let extractedURL = try await extractModel(from: destinationURL, modelName: modelName)
        
        print("‚úÖ Model downloaded and extracted successfully: \(extractedURL.path)")
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        delegate?.modelDownloadManager(self, didCompleteDownloadFor: modelName, at: extractedURL)
        
        return extractedURL
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ URL –º–æ–¥–µ–ª–∏
    /// Get local model URL
    func getLocalModelURL(_ modelName: String) -> URL? {
        let modelsDir = getDocumentsDirectory().appendingPathComponent("Models")
        let extractedDir = modelsDir.appendingPathComponent(modelName)
        
        // –ò—â–µ–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        guard fileManager.fileExists(atPath: extractedDir.path) else { return nil }
        
        do {
            let contents = try fileManager.contentsOfDirectory(at: extractedDir, includingPropertiesForKeys: nil)
            return contents.first(where: { $0.pathExtension == "bin" || $0.pathExtension == "ggml" })
        } catch {
            print("‚ùå Error reading model directory: \(error)")
            return nil
        }
    }
    
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    /// Validate model
    func validateModel(at url: URL) -> Bool {
        guard fileManager.fileExists(atPath: url.path) else { return false }
        
        do {
            let attributes = try fileManager.attributesOfItem(atPath: url.path)
            guard let fileSize = attributes[.size] as? Int else { return false }
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ (10MB)
            return fileSize > 10 * 1024 * 1024
        } catch {
            return false
        }
    }
    
    /// –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    /// Remove model
    func removeModel(_ modelName: String) async throws {
        guard let url = getLocalModelURL(modelName) else {
            throw ModelDownloadError.modelNotFound
        }
        
        try fileManager.removeItem(at: url)
        print("üóëÔ∏è Model removed: \(modelName)")
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    /// Get available models
    func getAvailableModels() -> [String] {
        return ["tiny.en", "base.en", "small.en"]
    }
    
    // MARK: - Private Methods
    
    private func getModelConfiguration(_ modelName: String) -> ModelConfiguration? {
        let models: [String: ModelConfiguration] = [
            "tiny.en": ModelConfiguration(
                name: "tiny.en",
                size: 40 * 1024 * 1024,
                downloadURL: "https://huggingface.co/argmaxinc/whisperkit/resolve/main/tiny.en.zip",
                checksum: "a1b2c3d4e5f6",
                localPath: "Models/tiny.en.zip"
            ),
            "base.en": ModelConfiguration(
                name: "base.en",
                size: 150 * 1024 * 1024,
                downloadURL: "https://huggingface.co/argmaxinc/whisperkit/resolve/main/base.en.zip",
                checksum: "f6e5d4c3b2a1",
                localPath: "Models/base.en.zip"
            ),
            "small.en": ModelConfiguration(
                name: "small.en",
                size: 500 * 1024 * 1024,
                downloadURL: "https://huggingface.co/argmaxinc/whisperkit/resolve/main/small.en.zip",
                checksum: "1a2b3c4d5e6f",
                localPath: "Models/small.en.zip"
            )
        ]
        
        return models[modelName]
    }
    
    private func getDocumentsDirectory() -> URL {
        return fileManager.urls(for: .documentDirectory, in: .userDomainMask).first!
    }
    
    /// –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
    /// Extract model ZIP file
    private func extractModel(from zipURL: URL, modelName: String) async throws -> URL {
        let documentsDir = getDocumentsDirectory()
        let modelsDir = documentsDir.appendingPathComponent("Models")
        let extractedDir = modelsDir.appendingPathComponent(modelName)
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if fileManager.fileExists(atPath: extractedDir.path) {
            try fileManager.removeItem(at: extractedDir)
        }
        try fileManager.createDirectory(at: extractedDir, withIntermediateDirectories: true)
        
        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP —Ñ–∞–π–ª (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Process)
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ZipFoundation –∏–ª–∏ –¥—Ä—É–≥–æ–π ZIP –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        print("üì¶ ZIP extraction not implemented - using placeholder")
        
        // –°–æ–∑–¥–∞–µ–º placeholder —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
        let placeholderFile = extractedDir.appendingPathComponent("\(modelName).bin")
        try "placeholder_model_data".write(to: placeholderFile, atomically: true, encoding: .utf8)
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
        let modelFile = placeholderFile
        
        print("üì¶ Model extracted to: \(modelFile.path)")
        return modelFile
    }
}

// MARK: - URLSessionDownloadDelegate (Removed - using async/await instead)

// MARK: - Model Configuration
struct ModelConfiguration {
    let name: String
    let size: Int
    let downloadURL: String
    let checksum: String
    let localPath: String
}

// MARK: - Model Download Errors
enum ModelDownloadError: Error, LocalizedError {
    case modelNotFound
    case invalidURL
    case downloadFailed
    case validationFailed
    
    var errorDescription: String? {
        switch self {
        case .modelNotFound:
            return "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
        case .downloadFailed:
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"
        case .validationFailed:
            return "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"
        }
    }
}
