//
//  WhisperKitQualityManager.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 24.01.2025.
//

import Foundation
import WhisperKit
import UIKit

// MARK: - Quality Configuration Models

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è WhisperKit
/// Quality configuration for WhisperKit
struct WhisperQualityConfiguration {
    let modelName: String
    let description: String
    let expectedWER: Double
    let expectedRTF: Double
    let memoryUsage: UInt64
    
    static let optimizedForEnglish = WhisperQualityConfiguration(
        modelName: "large-v3",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ –≤ WhisperKitManager
        description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
        expectedWER: 3.5,
        expectedRTF: 0.25,
        memoryUsage: 1_600_000_000  // 1.6 GB
    )
    
    static let balancedQuality = WhisperQualityConfiguration(
        modelName: "small.en",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ –≤ WhisperKitManager
        description: "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        expectedWER: 6.1,
        expectedRTF: 0.12,
        memoryUsage: 600_000_000  // 600 MB
    )
    
    static let fastProcessing = WhisperQualityConfiguration(
        modelName: "base.en",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ–¥–µ–ª—å, —á—Ç–æ –∏ –≤ WhisperKitManager
        description: "–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –±–∞–∑–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
        expectedWER: 9.2,
        expectedRTF: 0.08,
        memoryUsage: 250_000_000  // 250 MB
    )
    
    static let ultraFast = WhisperQualityConfiguration(
        modelName: "tiny.en",  // –°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –∏–∑ WhisperKitManager
        description: "–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        expectedWER: 12.0,
        expectedRTF: 0.05,
        memoryUsage: 100_000_000  // 100 MB
    )
}

/// –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
/// Quality level for speech recognition
enum QualityLevel: String, CaseIterable {
    case optimized = "optimized"      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è A16+
    case balanced = "balanced"        // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    case fast = "fast"               // –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    case ultraFast = "ultraFast"     // –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    case adaptive = "adaptive"       // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
    
    var configuration: WhisperQualityConfiguration {
        switch self {
        case .optimized:
            return .optimizedForEnglish
        case .balanced:
            return .balancedQuality
        case .fast:
            return .fastProcessing
        case .ultraFast:
            return .ultraFast
        case .adaptive:
            return Self.selectOptimalConfiguration()
        }
    }
    
    var displayName: String {
        switch self {
        case .optimized:
            return "üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        case .balanced:
            return "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"
        case .fast:
            return "‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
        case .ultraFast:
            return "üöÄ –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è"
        case .adaptive:
            return "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä"
        }
    }
    
    var description: String {
        switch self {
        case .optimized:
            return "–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è A16+ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (3.5% WER)"
        case .balanced:
            return "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ (6.1% WER)"
        case .fast:
            return "–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (9.2% WER)"
        case .ultraFast:
            return "–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (12.0% WER)"
        case .adaptive:
            return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
        }
    }
    
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    /// Automatic configuration selection based on device
    static func selectOptimalConfiguration() -> WhisperQualityConfiguration {
        let deviceModel = UIDevice.current.model
        let totalMemory = ProcessInfo.processInfo.physicalMemory
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        let isA16Plus = deviceModel.contains("iPhone15") || deviceModel.contains("iPhone16") || deviceModel.contains("iPhone17")
        let isM1Plus = deviceModel.contains("iPad") && totalMemory > 4_000_000_000
        let hasEnoughMemory = totalMemory > 3_000_000_000
        
        if isA16Plus || isM1Plus {
            return .optimizedForEnglish
        } else if hasEnoughMemory {
            return .balancedQuality
        } else {
            return .fastProcessing
        }
    }
}

/// –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
/// Quality metrics for speech recognition
struct QualityMetrics {
    let processingTime: TimeInterval
    let realtimeFactor: Double
    let wordErrorRate: Double?
    let memoryPeak: UInt64
    let modelName: String
    let qualityLevel: QualityLevel
    let timestamp: Date
    
    var performanceScore: Double {
        // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-100)
        let speedScore = min(100, max(0, 100 - (realtimeFactor * 100)))
        let memoryScore = min(100, max(0, 100 - (Double(memoryPeak) / 1_000_000_000 * 10)))
        return (speedScore + memoryScore) / 2
    }
}

// MARK: - WhisperKitQualityManager Delegate

protocol WhisperKitQualityManagerDelegate: AnyObject {
    func qualityManager(_ manager: WhisperKitQualityManager, didUpdateQualityLevel level: QualityLevel)
    func qualityManager(_ manager: WhisperKitQualityManager, didUpdateMetrics metrics: QualityMetrics)
    func qualityManager(_ manager: WhisperKitQualityManager, didEncounterError error: Error)
    func qualityManager(_ manager: WhisperKitQualityManager, didCompleteInitialization success: Bool)
}

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è WhisperKit
/// Quality manager for WhisperKit
actor WhisperKitQualityManager {
    
    // MARK: - Singleton
    static let shared = WhisperKitQualityManager()
    
    // MARK: - Properties
    private var whisperKit: WhisperKit?
    private var currentQualityLevel: QualityLevel = .adaptive
    private var isInitialized = false
    private var metricsHistory: [QualityMetrics] = []
    private var currentMetrics: QualityMetrics?
    
    // MARK: - Audio Buffering (–∫–∞–∫ –≤ WhisperKitManager)
    private var audioBuffer: [Float] = []
    private var maxBufferSize = 16000 * 30 // 30 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ
    private var isTranscribing = false
    
    // MARK: - Delegate
    weak var delegate: WhisperKitQualityManagerDelegate?
    
    // MARK: - Private Initializer
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
    /// Initialize with selected quality level
    func initialize(qualityLevel: QualityLevel = .adaptive) async throws {
        print("üöÄ [QUALITY] Initializing WhisperKit with quality level: \(qualityLevel.rawValue)")
        
        currentQualityLevel = qualityLevel
        let config = qualityLevel.configuration
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WhisperKit
        let whisperKitConfig = WhisperKitConfig(model: config.modelName)
        
        do {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhisperKit
            print("üîÑ [QUALITY] Creating WhisperKit instance...")
            whisperKit = try await WhisperKit(whisperKitConfig)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WhisperKit –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            guard whisperKit != nil else {
                throw WhisperKitError.notInitialized
            }
            
            isInitialized = true
            
            print("‚úÖ [QUALITY] WhisperKit initialized with model: \(config.modelName)")
            print("üìä [QUALITY] Expected WER: \(config.expectedWER)%, RTF: \(config.expectedRTF)")
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç
            await notifyDelegate { delegate in
                delegate.qualityManager(self, didCompleteInitialization: true)
            }
            
        } catch {
            print("‚ùå [QUALITY] Failed to initialize WhisperKit: \(error.localizedDescription)")
            whisperKit = nil
            isInitialized = false
            await notifyDelegate { delegate in
                delegate.qualityManager(self, didEncounterError: error)
            }
            throw error
        }
    }
    
    /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
    /// Switch quality level
    func switchQualityLevel(to level: QualityLevel) async throws {
        guard level != currentQualityLevel else {
            print("‚ö†Ô∏è [QUALITY] Already using quality level: \(level.rawValue)")
            return
        }
        
        print("üîÑ [QUALITY] Switching to quality level: \(level.rawValue)")
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        whisperKit = nil
        isInitialized = false
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
        try await initialize(qualityLevel: level)
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç
        await notifyDelegate { delegate in
            delegate.qualityManager(self, didUpdateQualityLevel: level)
        }
    }
    
    /// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫ (–∫–∞–∫ –≤ WhisperKitManager)
    /// Transcribe with metrics tracking (like WhisperKitManager)
    func transcribe(audioArray: [Float]) async throws -> String {
        guard isInitialized, let whisperKit = whisperKit else {
            print("‚ùå [QUALITY] WhisperKit not initialized or nil")
            throw WhisperKitError.notInitialized
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–µ–π–º—ã –≤ –±—É—Ñ–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ (–∫–∞–∫ –≤ WhisperKitManager)
        audioBuffer.append(contentsOf: audioArray)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if audioBuffer.count > maxBufferSize {
            audioBuffer = Array(audioBuffer.suffix(maxBufferSize))
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        guard !isTranscribing else {
            return ""
        }
        
        // –î–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
        guard !audioBuffer.isEmpty else {
            return ""
        }
        
        let startTime = Date()
        let memoryBefore = getCurrentMemoryUsage()
        
        do {
            isTranscribing = true
            print("üé§ [QUALITY] Transcribing \(audioBuffer.count) buffered audio samples...")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –±—É—Ñ–µ—Ä –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ WhisperKitManager)
            let result = try await whisperKit.transcribe(audioArray: audioBuffer)
            
            let processingTime = Date().timeIntervalSince(startTime)
            let memoryAfter = getCurrentMemoryUsage()
            let audioLength = Double(audioBuffer.count) / 16000.0
            let realtimeFactor = processingTime / audioLength
            
            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            let metrics = QualityMetrics(
                processingTime: processingTime,
                realtimeFactor: realtimeFactor,
                wordErrorRate: nil, // WER —Ç—Ä–µ–±—É–µ—Ç ground truth
                memoryPeak: max(memoryBefore, memoryAfter),
                modelName: currentQualityLevel.configuration.modelName,
                qualityLevel: currentQualityLevel,
                timestamp: Date()
            )
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            currentMetrics = metrics
            metricsHistory.append(metrics)
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
            if metricsHistory.count > 100 {
                metricsHistory.removeFirst()
            }
            
            print("üìä [QUALITY] Metrics - RTF: \(String(format: "%.2f", realtimeFactor)), Time: \(String(format: "%.2f", processingTime))s")
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç
            await notifyDelegate { delegate in
                delegate.qualityManager(self, didUpdateMetrics: metrics)
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤ WhisperKitManager
            var combinedText = ""
            if !result.isEmpty {
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç (–∫–∞–∫ –≤ WhisperKitManager)
                let allText = result.map { $0.text }.joined(separator: " ")
                
                // –§–∏–ª—å—Ç—Ä—É–µ–º —à—É–º–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                let filteredText = filterNoiseTokens(from: allText)
                
                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç
                if !filteredText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
                    combinedText = filteredText
                }
            }
            
            print("üéØ [QUALITY] Raw result: \(result.count) segments, filtered: '\(combinedText)'")
            isTranscribing = false
            return combinedText
            
        } catch {
            isTranscribing = false
            print("‚ùå [QUALITY] Transcription failed: \(error.localizedDescription)")
            await notifyDelegate { delegate in
                delegate.qualityManager(self, didEncounterError: error)
            }
            throw error
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
    /// Get current metrics
    func getCurrentMetrics() -> QualityMetrics? {
        return currentMetrics
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
    /// Get metrics history
    func getMetricsHistory() -> [QualityMetrics] {
        return metricsHistory
    }
    
    /// –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞ (–∫–∞–∫ –≤ WhisperKitManager)
    /// Clear audio buffer (like WhisperKitManager)
    func clearAudioBuffer() {
        audioBuffer.removeAll()
        print("üßπ [QUALITY] Audio buffer cleared")
    }
    
    /// –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤)
    /// Filter noise tokens (improved version without short word filtering)
    private func filterNoiseTokens(from text: String) -> String {
        var filteredText = text
        
        // –°–ø–∏—Å–æ–∫ —à—É–º–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        let noisePatterns = [
            // –û—Å–Ω–æ–≤–Ω—ã–µ —à—É–º–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            "\\[Music\\]", "\\[music\\]", "\\[MUSIC\\]",
            "\\[Noise\\]", "\\[noise\\]", "\\[NOISE\\]",
            "\\[Silence\\]", "\\[silence\\]", "\\[SILENCE\\]",
            "\\[Breathing\\]", "\\[breathing\\]", "\\[BREATHING\\]",
            "\\[Sighing\\]", "\\[sighing\\]", "\\[SIGHING\\]",
            "\\[Whooshing\\]", "\\[whooshing\\]", "\\[WHOOSHING\\]",
            "\\[Blank Audio\\]", "\\[blank audio\\]", "\\[BLANK AUDIO\\]",
            "\\[Background Noise\\]", "\\[background noise\\]", "\\[BACKGROUND NOISE\\]",
            "\\[Static\\]", "\\[static\\]", "\\[STATIC\\]",
            "\\[Wind\\]", "\\[wind\\]", "\\[WIND\\]",
            "\\[Audio\\]", "\\[audio\\]", "\\[AUDIO\\]",
            "\\[Sound\\]", "\\[sound\\]", "\\[SOUND\\]",
            "\\[Ambient\\]", "\\[ambient\\]", "\\[AMBIENT\\]",
            "\\[Atmospheric\\]", "\\[atmospheric\\]", "\\[ATMOSPHERIC\\]",
            "\\[Environmental\\]", "\\[environmental\\]", "\\[ENVIRONMENTAL\\]",
            "\\[Acoustic\\]", "\\[acoustic\\]", "\\[ACOUSTIC\\]",
            "\\[Electronic\\]", "\\[electronic\\]", "\\[ELECTRONIC\\]",
            "\\[Vocal\\]", "\\[vocal\\]", "\\[VOCAL\\]",
            "\\[Instrument\\]", "\\[instrument\\]", "\\[INSTRUMENT\\]",
            "\\[Instrumental\\]", "\\[instrumental\\]", "\\[INSTRUMENTAL\\]",
            "\\[Melody\\]", "\\[melody\\]", "\\[MELODY\\]",
            "\\[Rhythm\\]", "\\[rhythm\\]", "\\[RHYTHM\\]",
            "\\[Beat\\]", "\\[beat\\]", "\\[BEAT\\]",
            "\\[Song\\]", "\\[song\\]", "\\[SONG\\]",
            "\\[Tune\\]", "\\[tune\\]", "\\[TUNE\\]",
            "\\[Gasp\\]", "\\[gasp\\]", "\\[GASP\\]"
        ]
        
        // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern in noisePatterns {
            filteredText = filteredText.replacingOccurrences(
                of: pattern,
                with: "",
                options: [.regularExpression, .caseInsensitive]
            )
        }
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ª—é–±—ã—Ö —à—É–º–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö (–∫—Ä–æ–º–µ –æ–±—ã—á–Ω—ã—Ö —Å–ª–æ–≤)
        filteredText = filteredText.replacingOccurrences(
            of: "\\[[^\\]]*\\]",
            with: "",
            options: .regularExpression
        )
        
        // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–∫–∞—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        let musicTerms = ["music", "beat", "rhythm", "melody", "tune", "song", "audio", "sound", "noise", "silence", "breathing", "sighing", "whooshing", "static", "wind", "ambient", "atmospheric", "environmental", "acoustic", "electronic", "vocal", "instrument", "instrumental", "upbeat", "background"]
        
        for term in musicTerms {
            let pattern = "\\([^)]*\(term)[^)]*\\)"
            filteredText = filteredText.replacingOccurrences(
                of: pattern,
                with: "",
                options: [.regularExpression, .caseInsensitive]
            )
        }
        
        // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        filteredText = filteredText.replacingOccurrences(
            of: "\\s+",
            with: " ",
            options: .regularExpression
        )
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        filteredText = filteredText.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û–í–¢–û–†–ï–ù–ò–ô –ò –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô
        // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã (–±–æ–ª–µ–µ 2 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥)
        let sentences = filteredText.components(separatedBy: ". ")
        var uniqueSentences: [String] = []
        var lastSentence = ""
        var repeatCount = 0
        
        for sentence in sentences {
            let trimmedSentence = sentence.trimmingCharacters(in: .whitespacesAndNewlines)
            if trimmedSentence.isEmpty { continue }
            
            if trimmedSentence == lastSentence {
                repeatCount += 1
                if repeatCount < 2 {  // –†–∞–∑—Ä–µ—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                    uniqueSentences.append(trimmedSentence)
                }
            } else {
                repeatCount = 0
                lastSentence = trimmedSentence
                uniqueSentences.append(trimmedSentence)
            }
        }
        
        filteredText = uniqueSentences.joined(separator: ". ")
        
        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏) - –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞–∂–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
        let words = filteredText.components(separatedBy: " ")
        if words.count == 1 && filteredText.count < 10 {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∞–∂–Ω—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º —Å–ª–æ–≤–æ–º
            let importantShortWords = ["I", "a", "an", "is", "it", "we", "he", "she", "my", "me", "us", "or", "of", "to", "in", "on", "at", "by", "as", "be", "do", "go", "so", "up", "if", "no", "oh", "hi", "ok", "am", "do", "go", "no", "oh", "ah", "eh", "uh", "um", "er", "hm", "mm", "yeah", "yes", "no", "ok", "hi", "bye"]
            let cleanWord = filteredText.trimmingCharacters(in: .punctuationCharacters)
            if !importantShortWords.contains(cleanWord) {
                filteredText = ""
            }
        }
        
        return filteredText
    }
    
    /// –§–∞–π–ª–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–∫–∞–∫ –≤ WhisperKitManager)
    /// File transcription (like WhisperKitManager)
    func transcribeFile(audioPath: String) async throws -> String {
        guard isInitialized, let whisperKit = whisperKit else {
            print("‚ùå [QUALITY] WhisperKit not initialized or nil")
            throw WhisperKitError.notInitialized
        }
        
        print("üîÑ [QUALITY] Performing file transcription: \(audioPath)")
        
        do {
            let startTime = Date()
            let result = try await whisperKit.transcribe(audioPath: audioPath)
            let processingTime = Date().timeIntervalSince(startTime)
            
            print("üîÑ [QUALITY] File transcription completed in \(processingTime) sec")
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            var combinedText = ""
            for transcriptionResult in result {
                if !transcriptionResult.text.isEmpty {
                    let text = transcriptionResult.text.trimmingCharacters(in: .whitespacesAndNewlines)
                    if !text.isEmpty {
                        if !combinedText.isEmpty {
                            combinedText += " "
                        }
                        combinedText += text
                    }
                }
            }
            
            print("üéâ [QUALITY] FILE TRANSCRIPTION: '\(combinedText)'")
            return combinedText
            
        } catch {
            print("‚ùå [QUALITY] File transcription failed: \(error.localizedDescription)")
            await notifyDelegate { delegate in
                delegate.qualityManager(self, didEncounterError: error)
            }
            throw error
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫
    /// Get average metrics
    func getAverageMetrics() -> QualityMetrics? {
        guard !metricsHistory.isEmpty else { return nil }
        
        let avgProcessingTime = metricsHistory.map { $0.processingTime }.reduce(0, +) / Double(metricsHistory.count)
        let avgRTF = metricsHistory.map { $0.realtimeFactor }.reduce(0, +) / Double(metricsHistory.count)
        let avgMemory = metricsHistory.map { $0.memoryPeak }.reduce(0, +) / UInt64(metricsHistory.count)
        
        return QualityMetrics(
            processingTime: avgProcessingTime,
            realtimeFactor: avgRTF,
            wordErrorRate: nil,
            memoryPeak: avgMemory,
            modelName: currentQualityLevel.configuration.modelName,
            qualityLevel: currentQualityLevel,
            timestamp: Date()
        )
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫–∞—á–µ—Å—Ç–≤–∞
    /// Get available quality levels
    func getAvailableQualityLevels() -> [QualityLevel] {
        return QualityLevel.allCases
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
    /// Get current quality level
    func getCurrentQualityLevel() -> QualityLevel {
        return currentQualityLevel
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    /// Check if ready
    var isReady: Bool {
        return isInitialized && whisperKit != nil
    }
    
    // MARK: - Private Methods
    
    /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–ª–µ–≥–∞—Ç–∞
    /// Safe delegate notification
    private func notifyDelegate(_ action: @escaping (WhisperKitQualityManagerDelegate) -> Void) {
        guard let delegate = delegate else { 
            print("‚ö†Ô∏è [QUALITY] No delegate set, skipping notification")
            return 
        }
        
        Task { @MainActor in
            action(delegate)
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    /// Get current memory usage
    private func getCurrentMemoryUsage() -> UInt64 {
        var info = mach_task_basic_info()
        var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size)/4
        
        let kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {
            $0.withMemoryRebound(to: integer_t.self, capacity: 1) {
                task_info(mach_task_self_, task_flavor_t(MACH_TASK_BASIC_INFO), $0, &count)
            }
        }
        
        return kerr == KERN_SUCCESS ? info.resident_size : 0
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–∞
    /// Set delegate
    func setDelegate(_ delegate: WhisperKitQualityManagerDelegate?) async {
        self.delegate = delegate
    }
    
    /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// Reset state
    func reset() async {
        whisperKit = nil
        isInitialized = false
        currentMetrics = nil
        metricsHistory.removeAll()
        print("üîÑ [QUALITY] Quality manager reset")
    }
}

// MARK: - Quality Level Extensions

extension QualityLevel {
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
    /// Check device compatibility
    func isCompatibleWithDevice() -> Bool {
        let deviceModel = UIDevice.current.model
        let totalMemory = ProcessInfo.processInfo.physicalMemory
        
        switch self {
        case .optimized:
            // –¢—Ä–µ–±—É–µ—Ç A16+ –∏–ª–∏ M1+ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é
            let isA16Plus = deviceModel.contains("iPhone15") || deviceModel.contains("iPhone16") || deviceModel.contains("iPhone17")
            let isM1Plus = deviceModel.contains("iPad") && totalMemory > 4_000_000_000
            return isA16Plus || isM1Plus
            
        case .balanced:
            // –¢—Ä–µ–±—É–µ—Ç A14+ –∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
            let isA14Plus = deviceModel.contains("iPhone13") || deviceModel.contains("iPhone14") || deviceModel.contains("iPhone15") || deviceModel.contains("iPhone16") || deviceModel.contains("iPhone17")
            return isA14Plus || totalMemory > 2_000_000_000
            
        case .fast:
            // –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            return true
            
        case .ultraFast:
            // –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            return true
            
        case .adaptive:
            // –í—Å–µ–≥–¥–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä)
            return true
        }
    }
    
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    /// Get device recommendation
    static func recommendedForDevice() -> QualityLevel {
        let deviceModel = UIDevice.current.model
        let totalMemory = ProcessInfo.processInfo.physicalMemory
        
        // A16+ –∏–ª–∏ M1+ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é
        let isA16Plus = deviceModel.contains("iPhone15") || deviceModel.contains("iPhone16") || deviceModel.contains("iPhone17")
        let isM1Plus = deviceModel.contains("iPad") && totalMemory > 4_000_000_000
        
        if isA16Plus || isM1Plus {
            return .optimized
        }
        
        // A14+ –∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
        let isA14Plus = deviceModel.contains("iPhone13") || deviceModel.contains("iPhone14")
        if isA14Plus || totalMemory > 2_000_000_000 {
            return .balanced
        }
        
        // –°—Ç–∞—Ä—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        return .fast
    }
}
