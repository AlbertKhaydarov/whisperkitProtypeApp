//
//  WhisperKitManager.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 21.10.2025.
//

import Foundation
import SwiftWhisper // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SwiftWhisper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Whisper API

// MARK: - WhisperSegment Model
struct WhisperSegment {
    let text: String
    let start: Double
    let end: Double
}

// MARK: - WhisperConfiguration
struct WhisperConfiguration {
    var language: String = "english" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    var translate: Bool = false      // –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    var beamSize: Int = 5            // –†–∞–∑–º–µ—Ä –ª—É—á–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    var sampleRate: Double = 16000   // –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    
    static let defaultConfiguration = WhisperConfiguration()
}

// MARK: - WhisperKitManager Delegate
protocol WhisperKitManagerDelegate: AnyObject {
    func whisperKitManager(_ manager: WhisperKitManager, didUpdateWarmupProgress progress: Double)
    func whisperKitManager(_ manager: WhisperKitManager, didReceiveSegments segments: [WhisperSegment])
    func whisperKitManager(_ manager: WhisperKitManager, didCompleteWithSegments segments: [WhisperSegment])
    func whisperKitManager(_ manager: WhisperKitManager, didFailWith error: Error)
}

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å WhisperKit
/// Central manager for coordinating all WhisperKit operations
actor WhisperKitManager {
    
    // MARK: - Singleton
    static let shared = WhisperKitManager()
    
    // MARK: - Properties
    private var whisper: Whisper?
    private var isInitialized = false
    private var isWarmedUp = false
    private var currentSession: Any? // Placeholder for WhisperSession
    private var audioBuffer: [Float] = []
    private let minBufferSize = 8000 // –ú–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫—É–Ω–¥—ã –∞—É–¥–∏–æ (16kHz) - —É–º–µ–Ω—å—à–µ–Ω –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    private let maxBufferSize = 160000 // –ú–∞–∫—Å–∏–º—É–º ~10 —Å–µ–∫—É–Ω–¥ –∞—É–¥–∏–æ (16kHz)
    private var isTranscribing = false // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    
    // MARK: - Configuration
    private var configuration: WhisperConfiguration = WhisperConfiguration(language: "english", translate: false, beamSize: 5, sampleRate: 16000)
    
    // MARK: - Delegate
    weak var delegate: WhisperKitManagerDelegate?
    
    // MARK: - Metrics
    private var processingTimes: [TimeInterval] = []
    private var averageProcessingTime: TimeInterval {
        guard !processingTimes.isEmpty else { return 0 }
        return processingTimes.reduce(0, +) / Double(processingTimes.count)
    }
    
    // MARK: - Private Initializer
    private init() {}
    
    /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –¥–µ–ª–µ–≥–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    /// Safely calls delegate on the main thread
    private func notifyDelegate(_ action: @escaping (WhisperKitManagerDelegate) -> Void) {
        guard let delegate = delegate else { return }
        
        Task { @MainActor in
            action(delegate)
        }
    }
    
    // MARK: - Public Methods
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SwiftWhisper
    /// Initialize SwiftWhisper
    func initialize() async throws {
        guard !isInitialized else {
            print("‚ö†Ô∏è SwiftWhisper already initialized")
            return
        }
        
        print("üöÄ Initializing SwiftWhisper...")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ SwiftWhisper
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        // –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ SwiftWhisper —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        do {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
            let frameworkBundle = Bundle(for: Whisper.self)
            guard frameworkBundle.isLoaded else {
                throw WhisperKitError.initializationFailed(NSError(
                    domain: "WhisperKit",
                    code: -1,
                    userInfo: [NSLocalizedDescriptionKey: "SwiftWhisper framework not loaded"]
                ))
            }
            
            print("‚úì SwiftWhisper framework is available")
            isInitialized = true
            print("‚úÖ SwiftWhisper initialized successfully")
        } catch {
            print("‚ùå Failed to initialize SwiftWhisper: \(error.localizedDescription)")
            throw WhisperKitError.initializationFailed(error)
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
    /// Load Whisper model
    func loadModel(from url: URL) async throws {
        guard isInitialized else {
            throw WhisperKitError.notInitialized
        }
        
        print("üì• Loading Whisper model from: \(url.lastPathComponent)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
        guard FileManager.default.fileExists(atPath: url.path) else {
            print("‚ùå Model file not found at path: \(url.path)")
            throw WhisperKitError.modelFileNotFound
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
        do {
            let fileAttributes = try FileManager.default.attributesOfItem(atPath: url.path)
            if let fileSize = fileAttributes[.size] as? NSNumber {
                let sizeInMB = fileSize.doubleValue / (1024 * 1024)
                print("üìä Model file size: \(String(format: "%.2f", sizeInMB)) MB")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–±—ã—á–Ω–æ –º–æ–¥–µ–ª–∏ Whisper –≤–µ—Å—è—Ç –±–æ–ª—å—à–µ 100MB)
                if sizeInMB < 10 {
                    print("‚ö†Ô∏è Warning: Model file seems too small (\(String(format: "%.2f", sizeInMB)) MB)")
                }
            }
        } catch {
            print("‚ö†Ô∏è Could not get file attributes: \(error.localizedDescription)")
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        do {
            print("üîÑ Attempting to initialize Whisper with file: \(url.lastPathComponent)")
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            var params = WhisperParams.default
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            params.language = .english
            print("üåç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            params.translate = configuration.translate
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ WhisperParams –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ beamSize
            // params.beamSize = configuration.beamSize
            
            print("üåç Language set to: \(configuration.language)")
            print("üîÑ Translate: \(configuration.translate)")
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Whisper —Å –Ω–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            whisper = try Whisper(fromFileURL: url, withParams: params)
            print("‚úÖ Model loaded successfully with \(configuration.language) language")
        } catch {
            print("‚ùå Failed to load model: \(error.localizedDescription)")
            print("‚ùå Model file path: \(url.path)")
            print("‚ùå Model file exists: \(FileManager.default.fileExists(atPath: url.path))")
            throw WhisperKitError.modelLoadFailed(error)
        }
    }
    
    /// –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
    /// Warm up the model
    func warmup() async throws {
        guard isInitialized else {
            throw WhisperKitError.notInitialized
        }
        
        guard let whisper = whisper else {
            throw WhisperKitError.modelNotLoaded
        }
        
        guard !isWarmedUp else {
            print("‚ö†Ô∏è Model already warmed up")
            return
        }
        
        print("üî• Warming up model...")
        
        // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (1 —Å–µ–∫—É–Ω–¥–∞ —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤–º–µ—Å—Ç–æ —Ç–∏—à–∏–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞
        var warmupData = [Float](repeating: 0.0, count: 16000) // 1 —Å–µ–∫—É–Ω–¥–∞ –∞—É–¥–∏–æ
        for i in 0..<16000 {
            // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —á–∞—Å—Ç–æ—Ç–æ–π 440 –ì—Ü (–Ω–æ—Ç–∞ –ª—è –ø–µ—Ä–≤–æ–π –æ–∫—Ç–∞–≤—ã)
            warmupData[i] = sin(2.0 * Float.pi * 440.0 * Float(i) / 16000.0) * 0.5
        }
        print("üî• Warming up with English language detection...")
        _ = try await whisper.transcribe(audioFrames: warmupData)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–µ–≤–∞ —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
        notifyDelegate { delegate in
            delegate.whisperKitManager(self, didUpdateWarmupProgress: 1.0)
        }
        
        isWarmedUp = true
        print("‚úÖ Model warmed up successfully")
    }
    
    /// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤
    /// Transcribe audio frames
    func transcribe(audioFrames: [Float]) async throws -> [WhisperSegment] {
        guard isInitialized && isWarmedUp else {
            print("‚ùå WhisperKit –Ω–µ –≥–æ—Ç–æ–≤: initialized=\(isInitialized), warmedUp=\(isWarmedUp)")
            throw WhisperKitError.notReady
        }
        
        guard let whisper = whisper else {
            print("‚ùå –ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            throw WhisperKitError.modelNotLoaded
        }
        
        // –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤
        if !audioFrames.isEmpty {
            let samplesToPrint = min(5, audioFrames.count)
            var samplesInfo = "–ü–µ—Ä–≤—ã–µ \(samplesToPrint) –≤—Ö–æ–¥—è—â–∏—Ö —Å—ç–º–ø–ª–æ–≤: "
            for i in 0..<samplesToPrint {
                samplesInfo += String(format: "%.4f ", audioFrames[i])
            }
            print("üéµ \(samplesInfo)")
            
            let maxAmplitude = audioFrames.map { abs($0) }.max() ?? 0
            print("üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: \(maxAmplitude)")
            
            if maxAmplitude < 0.01 {
                print("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∏—à–∏–Ω–∞")
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–µ–π–º—ã –≤ –±—É—Ñ–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
        audioBuffer.append(contentsOf: audioFrames)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if audioBuffer.count > maxBufferSize {
            print("‚ö†Ô∏è –ê—É–¥–∏–æ –±—É—Ñ–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (\(audioBuffer.count) > \(maxBufferSize)), –æ–±—Ä–µ–∑–∞–µ–º...")
            audioBuffer = Array(audioBuffer.suffix(maxBufferSize))
        }
        
        print("üéµ –ü–æ–ª—É—á–µ–Ω–æ \(audioFrames.count) –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤, —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: \(audioBuffer.count)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        guard audioBuffer.count >= minBufferSize else {
            print("‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –±—É—Ñ–µ—Ä–∏–∑—É–µ–º...")
            return []
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        guard !isTranscribing else {
            print("‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –±—É—Ñ–µ—Ä–∏–∑—É–µ–º...")
            return []
        }
        
        // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let framesToProcess = Array(audioBuffer.prefix(minBufferSize))
        audioBuffer.removeFirst(minBufferSize)
        
        // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        let maxAmplitudeToProcess = framesToProcess.map { abs($0) }.max() ?? 0
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ \(framesToProcess.count) –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–º–∞–∫—Å. –∞–º–ø–ª–∏—Ç—É–¥–∞: \(maxAmplitudeToProcess))")
        
        do {
            isTranscribing = true
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å SwiftWhisper —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            print("üîÑ Starting transcription with English language...")
            
            let startTime = Date()
            let segments = try await whisper.transcribe(audioFrames: framesToProcess)
            let processingTime = Date().timeIntervalSince(startTime)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processingTimes.append(processingTime)
            print("‚è±Ô∏è Processing time: \(String(format: "%.2f", processingTime))s (avg: \(String(format: "%.2f", averageProcessingTime))s)")
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            var whisperSegments: [WhisperSegment] = []
            
            if segments.isEmpty {
                // –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
                print("‚ö†Ô∏è Empty segments received from SwiftWhisper")
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                whisperSegments = []
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∞—É–¥–∏–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                let maxAmplitude = framesToProcess.map { abs($0) }.max() ?? 0
                print("üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –∞—É–¥–∏–æ: \(maxAmplitude)")
                
                if maxAmplitude < 0.01 {
                    print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫ (–∞–º–ø–ª–∏—Ç—É–¥–∞ < 0.01)")
                } else if maxAmplitude > 0.9 {
                    print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫ (–∞–º–ø–ª–∏—Ç—É–¥–∞ > 0.9)")
                }
            } else {
                // –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                whisperSegments = segments.map { segment in
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
                    let text = segment.text ?? "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                    let start = segment.startTime != nil ? Double(segment.startTime) : 0.0
                    let end = segment.endTime != nil ? Double(segment.endTime) : 1.0
                    
                    return WhisperSegment(
                        text: text,
                        start: start,
                        end: end
                    )
                }
                
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ \(whisperSegments.count) —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä–µ—á–∏")
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ
            notifyDelegate { delegate in
                delegate.whisperKitManager(self, didReceiveSegments: whisperSegments)
            }
            
            print("‚úÖ Transcription completed: \(whisperSegments.count) segments")
            if !whisperSegments.isEmpty {
                for segment in whisperSegments {
                    print("üìù Segment: '\(segment.text)' (\(segment.start)-\(segment.end)s)")
                }
            } else {
                print("‚ö†Ô∏è No speech detected in audio segment")
            }
            
            isTranscribing = false
            return whisperSegments
            
        } catch {
            isTranscribing = false
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: \(error)")
            print("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: \(error.localizedDescription)")
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print("üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏:")
            print("   - –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: \(framesToProcess.count) —Ñ—Ä–µ–π–º–æ–≤")
            let maxAmplitude = framesToProcess.map { abs($0) }.max() ?? 0
            print("   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞: \(maxAmplitude)")
            
            if maxAmplitude < 0.01 {
                print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫ (–∞–º–ø–ª–∏—Ç—É–¥–∞ < 0.01)")
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ç
            notifyDelegate { delegate in
                delegate.whisperKitManager(self, didFailWith: error)
            }
            
            // –í—Å–µ–≥–¥–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            throw WhisperKitError.transcriptionFailed
        }
    }
    
    /// –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Finalize transcription
    func finalize() async throws -> [WhisperSegment] {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º continuation
        if isTranscribing {
            print("‚è≥ Waiting for current transcription to complete...")
            try await withCheckedThrowingContinuation { continuation in
                Task {
                    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    let startWaitTime = Date()
                    let maxWaitTime: TimeInterval = 5.0 // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                    
                    while isTranscribing && Date().timeIntervalSince(startWaitTime) < maxWaitTime {
                        try? await Task.sleep(nanoseconds: 100_000_000) // 0.1 —Å–µ–∫—É–Ω–¥—ã
                    }
                    
                    if isTranscribing {
                        print("‚ö†Ô∏è Transcription wait timeout exceeded, proceeding anyway")
                        isTranscribing = false
                    }
                    
                    continuation.resume()
                }
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ
        var finalSegments: [WhisperSegment] = []
        
        if !audioBuffer.isEmpty {
            print("üîÑ Processing remaining \(audioBuffer.count) audio frames...")
            
            do {
                isTranscribing = true
                
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ whisper –Ω–µ nil
                guard let whisper = whisper else {
                    throw WhisperKitError.modelNotLoaded
                }
                
                let startTime = Date()
                let segments = try await whisper.transcribe(audioFrames: audioBuffer)
                let processingTime = Date().timeIntervalSince(startTime)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processingTimes.append(processingTime)
                print("‚è±Ô∏è Final processing time: \(String(format: "%.2f", processingTime))s")
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if segments.isEmpty {
                    // –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
                    print("‚ö†Ô∏è Empty segments received in finalize")
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    finalSegments = []
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∞—É–¥–∏–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    if !audioBuffer.isEmpty {
                        let maxAmplitude = audioBuffer.map { abs($0) }.max() ?? 0
                        print("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞ –∞—É–¥–∏–æ: \(maxAmplitude)")
                        
                        if maxAmplitude < 0.01 {
                            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫ (–∞–º–ø–ª–∏—Ç—É–¥–∞ < 0.01)")
                        } else if maxAmplitude > 0.9 {
                            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫ (–∞–º–ø–ª–∏—Ç—É–¥–∞ > 0.9)")
                        }
                    }
                } else {
                    // –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                    finalSegments = segments.map { segment in
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ
                        let text = segment.text ?? "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                        let start = segment.startTime != nil ? Double(segment.startTime) : 0.0
                        let end = segment.endTime != nil ? Double(segment.endTime) : 1.0
                        
                        return WhisperSegment(
                            text: text,
                            start: start,
                            end: end
                        )
                    }
                    
                    print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: \(finalSegments.count) —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
                }
                
                audioBuffer.removeAll()
                print("‚úÖ Final transcription completed: \(finalSegments.count) segments")
                if !finalSegments.isEmpty {
                    for segment in finalSegments {
                        print("üìù Final segment: '\(segment.text)' (\(segment.start)-\(segment.end)s)")
                    }
                }
                isTranscribing = false
            } catch {
                isTranscribing = false
                print("‚ùå Final transcription failed: \(error)")
                print("‚ùå Error details: \(error.localizedDescription)")
                audioBuffer.removeAll()
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç –æ–± –æ—à–∏–±–∫–µ
                notifyDelegate { delegate in
                    delegate.whisperKitManager(self, didFailWith: error)
                }
                
                throw WhisperKitError.transcriptionFailed
            }
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        notifyDelegate { delegate in
            delegate.whisperKitManager(self, didCompleteWithSegments: finalSegments)
        }
        
        return finalSegments
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–∞
    /// Set delegate
    func setDelegate(_ delegate: WhisperKitManagerDelegate?) async {
        self.delegate = delegate
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Create new transcription session
    func startNewSession() async throws {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (SwiftWhisper –Ω–µ –∏–º–µ–µ—Ç createSession, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder)
        currentSession = "session_\(Date().timeIntervalSince1970)"
        print("üÜï New transcription session started")
    }
    
    /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// Reset state
    func reset() async {
        whisper = nil
        isInitialized = false
        isWarmedUp = false
        currentSession = nil
        audioBuffer.removeAll()
        print("üîÑ SwiftWhisper state reset")
    }
    
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Whisper
    /// Update Whisper configuration
    func updateConfiguration(_ newConfig: WhisperConfiguration) async {
        configuration = newConfig
        print("üîÑ WhisperKit configuration updated")
        print("üåç Language: \(configuration.language)")
        print("üîÑ Translate: \(configuration.translate)")
        print("üî¢ Beam Size: \(configuration.beamSize)")
        print("üìä Sample Rate: \(configuration.sampleRate)Hz")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WhisperKit
    /// Check if WhisperKit is ready
    var isReady: Bool {
        return isInitialized && isWarmedUp
    }
}

// MARK: - WhisperKit Errors
enum WhisperKitError: Error, LocalizedError {
    case notInitialized
    case notReady
    case modelNotLoaded
    case modelFileNotFound
    case modelFileCorrupted
    case modelLoadFailed(Error)
    case transcriptionFailed
    case initializationFailed(Error)
    
    var errorDescription: String? {
        switch self {
        case .notInitialized:
            return "WhisperKit –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        case .notReady:
            return "WhisperKit –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        case .modelNotLoaded:
            return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        case .modelFileNotFound:
            return "–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        case .modelFileCorrupted:
            return "–§–∞–π–ª –º–æ–¥–µ–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
        case .modelLoadFailed(let error):
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: \(error.localizedDescription)"
        case .transcriptionFailed:
            return "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        case .initializationFailed(let error):
            return "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhisperKit: \(error.localizedDescription)"
        }
    }
}
