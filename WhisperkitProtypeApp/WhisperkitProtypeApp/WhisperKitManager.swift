//
//  WhisperKitManager.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 21.10.2025.
//

import Foundation
import SwiftWhisper

// MARK: - WhisperSegment Model
struct WhisperSegment {
    let text: String
    let start: Double
    let end: Double
}

// MARK: - WhisperKitManager Delegate
protocol WhisperKitManagerDelegate: AnyObject {
    func whisperKitManager(_ manager: WhisperKitManager, didUpdateWarmupProgress progress: Double)
    func whisperKitManager(_ manager: WhisperKitManager, didReceiveSegments segments: [WhisperSegment])
    func whisperKitManager(_ manager: WhisperKitManager, didCompleteWithSegments segments: [WhisperSegment])
    func whisperKitManager(_ manager: WhisperKitManager, didFailWith error: Error)
}

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å WhisperKit
/// Central manager for coordinating all WhisperKit operations
actor WhisperKitManager {
    
    // MARK: - Singleton
    static let shared = WhisperKitManager()
    
    // MARK: - Properties
    private var whisper: Whisper?
    private var isInitialized = false
    private var isWarmedUp = false
    private var currentSession: Any? // Placeholder for WhisperSession
    
    // MARK: - Delegate
    weak var delegate: WhisperKitManagerDelegate?
    
    // MARK: - Private Initializer
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SwiftWhisper
    /// Initialize SwiftWhisper
    func initialize() async throws {
        guard !isInitialized else {
            print("‚ö†Ô∏è SwiftWhisper already initialized")
            return
        }
        
        print("üöÄ Initializing SwiftWhisper...")
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SwiftWhisper (—Ç—Ä–µ–±—É–µ—Ç URL —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏)
        // whisper = try Whisper() // –ù–µ–ª—å–∑—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –º–æ–¥–µ–ª–∏
        
        isInitialized = true
        print("‚úÖ SwiftWhisper initialized successfully")
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
    /// Load Whisper model
    func loadModel(from url: URL) async throws {
        guard isInitialized else {
            throw WhisperKitError.notInitialized
        }
        
        print("üì• Loading Whisper model from: \(url.lastPathComponent)")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞
        whisper = try Whisper(fromFileURL: url, withParams: .default)
        
        print("‚úÖ Model loaded successfully")
    }
    
    /// –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
    /// Warm up the model
    func warmup() async throws {
        guard isInitialized else {
            throw WhisperKitError.notInitialized
        }
        
        guard let whisper = whisper else {
            throw WhisperKitError.modelNotLoaded
        }
        
        guard !isWarmedUp else {
            print("‚ö†Ô∏è Model already warmed up")
            return
        }
        
        print("üî• Warming up model...")
        
        // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        let warmupData = Array(repeating: Float(0.0), count: 16000) // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
        _ = try await whisper.transcribe(audioFrames: warmupData)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–µ–≤–∞
        delegate?.whisperKitManager(self, didUpdateWarmupProgress: 1.0)
        
        isWarmedUp = true
        print("‚úÖ Model warmed up successfully")
    }
    
    /// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤
    /// Transcribe audio frames
    func transcribe(audioFrames: [Float]) async throws -> [WhisperSegment] {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        guard let whisper = whisper else {
            throw WhisperKitError.modelNotLoaded
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        print("üéµ Received \(audioFrames.count) audio frames for transcription")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å SwiftWhisper
        let segments = try await whisper.transcribe(audioFrames: audioFrames)
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
        let whisperSegments = segments.map { segment in
            WhisperSegment(
                text: segment.text,
                start: Double(segment.startTime),
                end: Double(segment.endTime)
            )
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ç
        delegate?.whisperKitManager(self, didReceiveSegments: whisperSegments)
        
        return whisperSegments
    }
    
    /// –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Finalize transcription
    func finalize() async throws -> [WhisperSegment] {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (SwiftWhisper –Ω–µ –∏–º–µ–µ—Ç finalize, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
        let whisperSegments: [WhisperSegment] = []
        
        delegate?.whisperKitManager(self, didCompleteWithSegments: whisperSegments)
        
        return whisperSegments
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–∞
    /// Set delegate
    func setDelegate(_ delegate: WhisperKitManagerDelegate?) async {
        self.delegate = delegate
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Create new transcription session
    func startNewSession() async throws {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (SwiftWhisper –Ω–µ –∏–º–µ–µ—Ç createSession, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder)
        currentSession = "session_\(Date().timeIntervalSince1970)"
        print("üÜï New transcription session started")
    }
    
    /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// Reset state
    func reset() async {
        whisper = nil
        isInitialized = false
        isWarmedUp = false
        currentSession = nil
        print("üîÑ SwiftWhisper state reset")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WhisperKit
    /// Check if WhisperKit is ready
    var isReady: Bool {
        return isInitialized && isWarmedUp
    }
}

// MARK: - WhisperKit Errors
enum WhisperKitError: Error, LocalizedError {
    case notInitialized
    case notReady
    case modelNotLoaded
    case transcriptionFailed
    
    var errorDescription: String? {
        switch self {
        case .notInitialized:
            return "WhisperKit –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        case .notReady:
            return "WhisperKit –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        case .modelNotLoaded:
            return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        case .transcriptionFailed:
            return "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        }
    }
}
