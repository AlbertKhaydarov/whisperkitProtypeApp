//
//  WhisperKitManager.swift
//  WhisperkitProtypeApp
//
//  Created by AI Assistant on 21.10.2025.
//

import Foundation
import SwiftWhisper

// MARK: - WhisperSegment Model
struct WhisperSegment {
    let text: String
    let start: Double
    let end: Double
}

// MARK: - WhisperKitManager Delegate
protocol WhisperKitManagerDelegate: AnyObject {
    func whisperKitManager(_ manager: WhisperKitManager, didUpdateWarmupProgress progress: Double)
    func whisperKitManager(_ manager: WhisperKitManager, didReceiveSegments segments: [WhisperSegment])
    func whisperKitManager(_ manager: WhisperKitManager, didCompleteWithSegments segments: [WhisperSegment])
    func whisperKitManager(_ manager: WhisperKitManager, didFailWith error: Error)
}

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å WhisperKit
/// Central manager for coordinating all WhisperKit operations
actor WhisperKitManager {
    
    // MARK: - Singleton
    static let shared = WhisperKitManager()
    
    // MARK: - Properties
    private var whisper: Whisper?
    private var isInitialized = false
    private var isWarmedUp = false
    private var currentSession: Any? // Placeholder for WhisperSession
    private var audioBuffer: [Float] = []
    private let minBufferSize = 16000 // –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –∞—É–¥–∏–æ (16kHz)
    
    // MARK: - Delegate
    weak var delegate: WhisperKitManagerDelegate?
    
    // MARK: - Private Initializer
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SwiftWhisper
    /// Initialize SwiftWhisper
    func initialize() async throws {
        guard !isInitialized else {
            print("‚ö†Ô∏è SwiftWhisper already initialized")
            return
        }
        
        print("üöÄ Initializing SwiftWhisper...")
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SwiftWhisper (—Ç—Ä–µ–±—É–µ—Ç URL —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏)
        // whisper = try Whisper() // –ù–µ–ª—å–∑—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –º–æ–¥–µ–ª–∏
        
        isInitialized = true
        print("‚úÖ SwiftWhisper initialized successfully")
    }
    
    /// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper
    /// Load Whisper model
    func loadModel(from url: URL) async throws {
        guard isInitialized else {
            throw WhisperKitError.notInitialized
        }
        
        print("üì• Loading Whisper model from: \(url.lastPathComponent)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
        guard FileManager.default.fileExists(atPath: url.path) else {
            print("‚ùå Model file not found at path: \(url.path)")
            throw WhisperKitError.modelFileNotFound
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
        do {
            let fileAttributes = try FileManager.default.attributesOfItem(atPath: url.path)
            if let fileSize = fileAttributes[.size] as? NSNumber {
                let sizeInMB = fileSize.doubleValue / (1024 * 1024)
                print("üìä Model file size: \(String(format: "%.2f", sizeInMB)) MB")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–±—ã—á–Ω–æ –º–æ–¥–µ–ª–∏ Whisper –≤–µ—Å—è—Ç –±–æ–ª—å—à–µ 100MB)
                if sizeInMB < 10 {
                    print("‚ö†Ô∏è Warning: Model file seems too small (\(String(format: "%.2f", sizeInMB)) MB)")
                }
            }
        } catch {
            print("‚ö†Ô∏è Could not get file attributes: \(error.localizedDescription)")
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        do {
            print("üîÑ Attempting to initialize Whisper with file: \(url.lastPathComponent)")
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Whisper –Ω–∞–ø—Ä—è–º—É—é (–æ–Ω –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil)
            whisper = try Whisper(fromFileURL: url, withParams: .default)
            print("‚úÖ Model loaded successfully")
        } catch {
            print("‚ùå Failed to load model: \(error.localizedDescription)")
            print("‚ùå Model file path: \(url.path)")
            print("‚ùå Model file exists: \(FileManager.default.fileExists(atPath: url.path))")
            throw WhisperKitError.modelLoadFailed(error)
        }
    }
    
    /// –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏
    /// Warm up the model
    func warmup() async throws {
        guard isInitialized else {
            throw WhisperKitError.notInitialized
        }
        
        guard let whisper = whisper else {
            throw WhisperKitError.modelNotLoaded
        }
        
        guard !isWarmedUp else {
            print("‚ö†Ô∏è Model already warmed up")
            return
        }
        
        print("üî• Warming up model...")
        
        // –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        let warmupData = Array(repeating: Float(0.0), count: 16000) // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
        _ = try await whisper.transcribe(audioFrames: warmupData)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–≥—Ä–µ–≤–∞
        delegate?.whisperKitManager(self, didUpdateWarmupProgress: 1.0)
        
        isWarmedUp = true
        print("‚úÖ Model warmed up successfully")
    }
    
    /// –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º–æ–≤
    /// Transcribe audio frames
    func transcribe(audioFrames: [Float]) async throws -> [WhisperSegment] {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        guard let whisper = whisper else {
            throw WhisperKitError.modelNotLoaded
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–µ–π–º—ã –≤ –±—É—Ñ–µ—Ä
        audioBuffer.append(contentsOf: audioFrames)
        print("üéµ Received \(audioFrames.count) audio frames, buffer size: \(audioBuffer.count)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        guard audioBuffer.count >= minBufferSize else {
            print("‚è≥ Not enough audio data yet, buffering...")
            return []
        }
        
        // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let framesToProcess = Array(audioBuffer.prefix(minBufferSize))
        audioBuffer.removeFirst(minBufferSize)
        
        print("üîÑ Processing \(framesToProcess.count) audio frames for transcription")
        
        do {
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å SwiftWhisper
            let segments = try await whisper.transcribe(audioFrames: framesToProcess)
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            let whisperSegments = segments.map { segment in
                WhisperSegment(
                    text: segment.text,
                    start: Double(segment.startTime),
                    end: Double(segment.endTime)
                )
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∞—Ç
            delegate?.whisperKitManager(self, didReceiveSegments: whisperSegments)
            
            print("‚úÖ Transcription completed: \(whisperSegments.count) segments")
            return whisperSegments
            
        } catch {
            print("‚ùå Transcription failed: \(error)")
            print("‚ùå Error details: \(error.localizedDescription)")
            throw WhisperKitError.transcriptionFailed
        }
    }
    
    /// –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Finalize transcription
    func finalize() async throws -> [WhisperSegment] {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ
        var finalSegments: [WhisperSegment] = []
        
        if !audioBuffer.isEmpty {
            print("üîÑ Processing remaining \(audioBuffer.count) audio frames...")
            
            do {
                let segments = try await whisper?.transcribe(audioFrames: audioBuffer) ?? []
                finalSegments = segments.map { segment in
                    WhisperSegment(
                        text: segment.text,
                        start: Double(segment.startTime),
                        end: Double(segment.endTime)
                    )
                }
                audioBuffer.removeAll()
                print("‚úÖ Final transcription completed: \(finalSegments.count) segments")
            } catch {
                print("‚ùå Final transcription failed: \(error)")
                audioBuffer.removeAll()
            }
        }
        
        delegate?.whisperKitManager(self, didCompleteWithSegments: finalSegments)
        
        return finalSegments
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–∞
    /// Set delegate
    func setDelegate(_ delegate: WhisperKitManagerDelegate?) async {
        self.delegate = delegate
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    /// Create new transcription session
    func startNewSession() async throws {
        guard isInitialized && isWarmedUp else {
            throw WhisperKitError.notReady
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (SwiftWhisper –Ω–µ –∏–º–µ–µ—Ç createSession, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder)
        currentSession = "session_\(Date().timeIntervalSince1970)"
        print("üÜï New transcription session started")
    }
    
    /// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// Reset state
    func reset() async {
        whisper = nil
        isInitialized = false
        isWarmedUp = false
        currentSession = nil
        audioBuffer.removeAll()
        print("üîÑ SwiftWhisper state reset")
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ WhisperKit
    /// Check if WhisperKit is ready
    var isReady: Bool {
        return isInitialized && isWarmedUp
    }
}

// MARK: - WhisperKit Errors
enum WhisperKitError: Error, LocalizedError {
    case notInitialized
    case notReady
    case modelNotLoaded
    case modelFileNotFound
    case modelFileCorrupted
    case modelLoadFailed(Error)
    case transcriptionFailed
    
    var errorDescription: String? {
        switch self {
        case .notInitialized:
            return "WhisperKit –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        case .notReady:
            return "WhisperKit –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        case .modelNotLoaded:
            return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        case .modelFileNotFound:
            return "–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        case .modelFileCorrupted:
            return "–§–∞–π–ª –º–æ–¥–µ–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"
        case .modelLoadFailed(let error):
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: \(error.localizedDescription)"
        case .transcriptionFailed:
            return "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"
        }
    }
}
