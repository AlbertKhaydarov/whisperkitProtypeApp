//
//  ViewController.swift
//  WhisperkitProtypeApp
//
//  Created by AlbertKh on 19.10.2025.
//

import UIKit
import AVFoundation

/// Main view controller for speech transcription
/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä–µ—á–∏
class ViewController: UIViewController {
    
    // MARK: - UI Components
    private let intermediateLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 0
        label.font = .systemFont(ofSize: 16, weight: .regular)
        label.textColor = .secondaryLabel
        label.textAlignment = .center
        label.text = "Tap the button and start speaking..."
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let finalTextView: UITextView = {
        let textView = UITextView()
        textView.font = .systemFont(ofSize: 18, weight: .medium)
        textView.textColor = .label
        textView.isEditable = false
        textView.backgroundColor = .systemGray6
        textView.layer.cornerRadius = 12
        textView.textContainerInset = UIEdgeInsets(top: 16, left: 16, bottom: 16, right: 16)
        textView.translatesAutoresizingMaskIntoConstraints = false
        return textView
    }()
    
    private let recordButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Start Recording", for: .normal)
        button.setTitle("Stop Recording", for: .selected)
        button.titleLabel?.font = .systemFont(ofSize: 18, weight: .semibold)
        button.backgroundColor = .systemBlue
        button.setTitleColor(.white, for: .normal)
        button.layer.cornerRadius = 12
        button.translatesAutoresizingMaskIntoConstraints = false
        return button
    }()
    
    private let statusLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 14, weight: .regular)
        label.textColor = .secondaryLabel
        label.textAlignment = .center
        label.text = "Ready"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let progressView: UIProgressView = {
        let progress = UIProgressView(progressViewStyle: .default)
        progress.progress = 0.0
        progress.translatesAutoresizingMaskIntoConstraints = false
        return progress
    }()
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .large)
        indicator.hidesWhenStopped = true
        indicator.translatesAutoresizingMaskIntoConstraints = false
        return indicator
    }()
    
    // MARK: - Properties
    private let whisperManager = WhisperKitManager.shared
    private let errorHandler = ErrorHandler()
    private let languageDetector = LanguageDetector()
    private var isRecording = false
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "Voice Transcription"
        view.backgroundColor = .systemBackground
        
        setupUI()
        setupConstraints()
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å WhisperKit
        initializeWhisperKit()
    }
    
    // MARK: - Setup
    private func setupUI() {
        view.addSubview(statusLabel)
        view.addSubview(intermediateLabel)
        view.addSubview(finalTextView)
        view.addSubview(recordButton)
        view.addSubview(progressView)
        view.addSubview(activityIndicator)
        
        recordButton.addTarget(
            self,
            action: #selector(handleRecordButtonTap),
            for: .touchUpInside
        )
        
        errorHandler.viewController = self
    }
    
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // Status label
            statusLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            statusLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            statusLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            
            // Progress view
            progressView.topAnchor.constraint(equalTo: statusLabel.bottomAnchor, constant: 10),
            progressView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            progressView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            
            // Intermediate label
            intermediateLabel.topAnchor.constraint(equalTo: progressView.bottomAnchor, constant: 30),
            intermediateLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            intermediateLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            intermediateLabel.heightAnchor.constraint(greaterThanOrEqualToConstant: 60),
            
            // Final text view
            finalTextView.topAnchor.constraint(equalTo: intermediateLabel.bottomAnchor, constant: 20),
            finalTextView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            finalTextView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            finalTextView.bottomAnchor.constraint(equalTo: recordButton.topAnchor, constant: -20),
            
            // Record button
            recordButton.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),
            recordButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),
            recordButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -20),
            recordButton.heightAnchor.constraint(equalToConstant: 56),
            
            // Activity indicator
            activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    // MARK: - Actions
    @objc private func handleRecordButtonTap() {
        print("üé§ handleRecordButtonTap –≤—ã–∑–≤–∞–Ω, isRecording: \(isRecording)")
        
        if isRecording {
            print("üé§ –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
            stopRecording()
        } else {
            print("üé§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...")
            startRecording()
        }
    }
    
    private func initializeWhisperKit() {
        activityIndicator.startAnimating()
        statusLabel.text = "Initializing..."
        recordButton.isEnabled = false
        
        Task {
            do {
                try await whisperManager.initialize()
                
                await MainActor.run {
                    activityIndicator.stopAnimating()
                    statusLabel.text = "Ready"
                    recordButton.isEnabled = true
                }
            } catch {
                await MainActor.run {
                    activityIndicator.stopAnimating()
                    statusLabel.text = "Initialization failed"
                    errorHandler.handle(error)
                }
            }
        }
    }
    
    private func startRecording() {
        print("üé§ startRecording –≤—ã–∑–≤–∞–Ω")
        
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        print("üé§ –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –∑–∞–ø–∏—Å–∏...")
        isRecording = true
        recordButton.isSelected = true
        recordButton.backgroundColor = .systemRed
        statusLabel.text = "Recording..."
        statusLabel.textColor = .systemRed
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        intermediateLabel.text = ""
        intermediateLabel.alpha = 1.0
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        recordButton.setNeedsLayout()
        recordButton.layoutIfNeeded()
        
        print("üé§ UI –æ–±–Ω–æ–≤–ª–µ–Ω: isRecording=\(isRecording), buttonTitle=\(recordButton.title(for: .selected) ?? "nil")")
        print("üé§ –ö–Ω–æ–ø–∫–∞ isSelected: \(recordButton.isSelected)")
        
        // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        Task {
            do {
                print("üé§ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...")
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
                try await checkMicrophonePermission()
                
                print("üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
                // –ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                try await whisperManager.startRealtimeTranscription(delegate: self)
                
                print("üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
            } catch {
                print("üé§ –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏: \(error)")
                await MainActor.run {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    isRecording = false
                    recordButton.isSelected = false
                    recordButton.backgroundColor = .systemBlue
                    statusLabel.text = "Ready"
                    statusLabel.textColor = .secondaryLabel
                    errorHandler.handle(error)
                }
            }
        }
    }
    
    private func stopRecording() {
        print("üõë stopRecording –≤—ã–∑–≤–∞–Ω")
        
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        print("üõë –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        isRecording = false
        recordButton.isSelected = false
        recordButton.backgroundColor = .systemBlue
        statusLabel.text = "Ready"
        statusLabel.textColor = .secondaryLabel
        intermediateLabel.text = ""
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        recordButton.setNeedsLayout()
        recordButton.layoutIfNeeded()
        
        print("üõë UI –æ–±–Ω–æ–≤–ª–µ–Ω: isRecording=\(isRecording), buttonTitle=\(recordButton.title(for: .normal) ?? "nil")")
        print("üõë –ö–Ω–æ–ø–∫–∞ isSelected: \(recordButton.isSelected)")
        
        // –ó–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        Task {
            print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            await whisperManager.stopTranscription()
            print("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        }
    }
    
    private func checkMicrophonePermission() async throws {
        let status = AVAudioSession.sharedInstance().recordPermission
        
        switch status {
        case .granted:
            return
        case .denied:
            throw WhisperKitError.microphonePermissionDenied
        case .undetermined:
            let granted = await withCheckedContinuation { continuation in
                AVAudioSession.sharedInstance().requestRecordPermission { granted in
                    continuation.resume(returning: granted)
                }
            }
            if !granted {
                throw WhisperKitError.microphonePermissionDenied
            }
        @unknown default:
            throw WhisperKitError.unknown(underlying: NSError(domain: "Permission", code: -1))
        }
    }
}

// MARK: - TranscriptionDelegate
extension ViewController: TranscriptionDelegate {
    func didReceiveIntermediateResult(_ text: String) {
        print("üì± didReceiveIntermediateResult –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '\(text)'")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ finalTextView
        let currentText = finalTextView.text ?? ""
        
        if currentText.isEmpty {
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            let timestamp = Date().formatted(date: .omitted, time: .shortened)
            finalTextView.text = "[\(timestamp)] \(text)..."
        } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
            var lines = currentText.components(separatedBy: .newlines)
            let lastLineIndex = lines.count - 1
            
            if lastLineIndex >= 0 {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                let lastLine = lines[lastLineIndex]
                if lastLine.contains("...") {
                    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –Ω–æ–≤—ã–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    let timestamp = lastLine.components(separatedBy: "] ").first ?? ""
                    lines[lastLineIndex] = "\(timestamp)] \(text)..."
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    let timestamp = Date().formatted(date: .omitted, time: .shortened)
                    lines.append("[\(timestamp)] \(text)...")
                }
                finalTextView.text = lines.joined(separator: "\n")
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ intermediateLabel
        intermediateLabel.text = "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ..."
        intermediateLabel.alpha = 0.7
        
        // Scroll to bottom
        let bottom = NSRange(location: finalTextView.text.count - 1, length: 1)
        finalTextView.scrollRangeToVisible(bottom)
    }
    
    func didReceiveFinalResult(_ text: String) {
        print("üì± didReceiveFinalResult –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '\(text)'")
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
        let currentText = finalTextView.text ?? ""
        
        if currentText.isEmpty {
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            let timestamp = Date().formatted(date: .omitted, time: .shortened)
            finalTextView.text = "[\(timestamp)] \(text)"
        } else {
            // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
            var lines = currentText.components(separatedBy: .newlines)
            let lastLineIndex = lines.count - 1
            
            if lastLineIndex >= 0 {
                let lastLine = lines[lastLineIndex]
                if lastLine.contains("...") {
                    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
                    let timestamp = lastLine.components(separatedBy: "] ").first ?? ""
                    lines[lastLineIndex] = "\(timestamp)] \(text)"
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    let timestamp = Date().formatted(date: .omitted, time: .shortened)
                    lines.append("[\(timestamp)] \(text)")
                }
                finalTextView.text = lines.joined(separator: "\n")
            }
        }
        
        intermediateLabel.text = ""
        
        // Scroll to bottom
        let bottom = NSRange(location: finalTextView.text.count - 1, length: 1)
        finalTextView.scrollRangeToVisible(bottom)
    }
    
    func didUpdateProgress(_ progress: Float) {
        print("üì± didUpdateProgress –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º: \(progress)")
        progressView.progress = progress
    }
    
    func didEncounterError(_ error: Error) {
        print("üì± didEncounterError –≤—ã–∑–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π: \(error)")
        errorHandler.handle(error)
        stopRecording()
    }
    
    func didDetectNonEnglishSpeech() {
        print("üì± didDetectNonEnglishSpeech –≤—ã–∑–≤–∞–Ω")
        showLanguageWarning()
    }
    
    private func showLanguageWarning() {
        let alert = UIAlertController(
            title: "English Only",
            message: "Please speak English. This model is optimized for English language only.",
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: "OK", style: .default))
        present(alert, animated: true)
    }
}

